# handlers/admin_handlers.py (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è, –ø–æ–ª–Ω–∞—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import telebot
from telebot import types
import logging
import datetime
import json
import os
import zipfile
import time
import uuid
from config import ADMIN_IDS, SUPPORT_CHANNEL_LINK
from database.db_manager import DatabaseManager
from api_client.xui_api_client import XuiAPIClient
from utils import messages, helpers
from keyboards import inline_keyboards
from utils.config_generator import ConfigGenerator
from utils.bot_helpers import send_subscription_info # —ç—Ç–æ –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
from handlers.user_handlers import _user_states
from config import REQUIRED_CHANNEL_ID, REQUIRED_CHANNEL_LINK # This should already be there
from api_client.factory import get_api_client
from utils.helpers import normalize_panel_inbounds
from utils.bot_helpers import finalize_profile_purchase
from handlers.domain_handlers import register_domain_handlers # <-- –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
from utils.system_helpers import remove_domain_nginx_files
from utils.system_helpers import run_shell_command
from utils import helpers
from utils.helpers import update_env_file
from utils.system_helpers import run_shell_command
from .domain_handlers import register_domain_handlers, start_webhook_setup_flow # <-- –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
from utils.helpers import normalize_panel_inbounds, parse_config_link

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
_bot: telebot.TeleBot = None
_db_manager: DatabaseManager = None
_xui_api: XuiAPIClient = None
_config_generator: ConfigGenerator = None
_admin_states = {}

def register_admin_handlers(bot_instance, db_manager_instance, xui_api_instance):
    global _bot, _db_manager, _xui_api, _config_generator , _admin_states
    _bot = bot_instance
    _db_manager = db_manager_instance
    _xui_api = xui_api_instance
    _config_generator = ConfigGenerator(db_manager_instance)

    # =============================================================================
    # SECTION: Helper and Menu Functions
    # =============================================================================
    register_domain_handlers(bot=_bot, db_manager=_db_manager, admin_states=_admin_states)


    def _clear_admin_state(admin_id):
        """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è."""
        if admin_id in _admin_states:
            del _admin_states[admin_id]

    def _show_menu(user_id, text, markup, message=None, parse_mode='Markdown'):
        """
        --- FINAL & ROBUST VERSION ---
        This function intelligently handles Markdown parsing errors.
        It first tries to send the message with Markdown. If Telegram rejects it
        due to a formatting error, it automatically retries sending it as plain text.
        """
        try:
            # First attempt: Send with specified parse_mode (usually Markdown)
            if message:
                return _bot.edit_message_text(text, user_id, message.message_id, reply_markup=markup, parse_mode=parse_mode)
            else:
                return _bot.send_message(user_id, text, reply_markup=markup, parse_mode=parse_mode)

        except telebot.apihelper.ApiTelegramException as e:
            # If the error is specifically a Markdown parsing error...
            if "can't parse entities" in str(e):
                logger.warning(f"Markdown parse error for user {user_id}. Retrying with plain text.")
                try:
                    # Second attempt: Send as plain text
                    if message:
                        return _bot.edit_message_text(text, user_id, message.message_id, reply_markup=markup, parse_mode=None)
                    else:
                        return _bot.send_message(user_id, text, reply_markup=markup, parse_mode=None)
                except telebot.apihelper.ApiTelegramException as retry_e:
                    logger.error(f"Failed to send menu even as plain text for user {user_id}: {retry_e}")

            # Handle other common errors
            elif 'message to edit not found' in str(e):
                return _bot.send_message(user_id, text, reply_markup=markup, parse_mode=parse_mode)
            elif 'message is not modified' not in str(e):
                logger.warning(f"Menu error for {user_id}: {e}")
                
        return message

    def _show_admin_main_menu(admin_id, message=None): 
        brand_name = _db_manager.get_setting('brand_name') or "Alamor VPN"
        welcome_text = messages.ADMIN_WELCOME.format(brand_name=brand_name)
        _show_menu(admin_id, welcome_text, inline_keyboards.get_admin_main_inline_menu(), message)
    def _show_server_management_menu(admin_id, message=None): _show_menu(admin_id, messages.SERVER_MGMT_MENU_TEXT, inline_keyboards.get_server_management_inline_menu(), message)
    def _show_plan_management_menu(admin_id, message=None): _show_menu(admin_id, messages.PLAN_MGMT_MENU_TEXT, inline_keyboards.get_plan_management_inline_menu(), message)
    def _show_payment_gateway_management_menu(admin_id, message=None): _show_menu(admin_id, messages.PAYMENT_GATEWAY_MGMT_MENU_TEXT, inline_keyboards.get_payment_gateway_management_inline_menu(), message)
    def _show_user_management_menu(admin_id, message=None): _show_menu(admin_id, messages.USER_MGMT_MENU_TEXT, inline_keyboards.get_user_management_inline_menu(), message)
    def _show_profile_management_menu(admin_id, message=None):
        _show_menu(admin_id, "üóÇÔ∏è –û–ø—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏:", inline_keyboards.get_profile_management_inline_menu(), message)

    # =============================================================================
    # SECTION: Single-Action Functions (Listing, Testing)
    # =============================================================================

    def list_all_servers(admin_id, message):
        _bot.edit_message_text(_generate_server_list_text(), admin_id, message.message_id, parse_mode='Markdown', reply_markup=inline_keyboards.get_back_button("admin_server_management"))

    # –≤ —Ñ–∞–π–ª–µ handlers/admin_handlers.py

    def list_all_plans(admin_id, message, return_text=False):
        plans = _db_manager.get_all_plans()
        if not plans: 
            text = messages.NO_PLANS_FOUND
        else:
            text = messages.LIST_PLANS_HEADER
            for p in plans:
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if p['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                if p['plan_type'] == 'fixed_monthly':
                    details = f"–û–±—ä–µ–º: {p['volume_gb']}GB | –°—Ä–æ–∫: {p['duration_days']} –¥–Ω–µ–π | –¶–µ–Ω–∞: {p['price']:,.0f} —Ç—É–º–∞–Ω–æ–≤"
                else:
                    # --- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å ---
                    duration_days = p.get('duration_days') # –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None
                    if duration_days and duration_days > 0:
                        duration_text = f"{duration_days} –¥–Ω–µ–π"
                    else:
                        duration_text = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"
                    # --- –∫–æ–Ω–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ ---
                    details = f"–¶–µ–Ω–∞ –∑–∞ –≥–∏–≥–∞–±–∞–π—Ç: {p['per_gb_price']:,.0f} —Ç—É–º–∞–Ω–æ–≤ | –°—Ä–æ–∫: {duration_text}"
                text += f"**ID: `{p['id']}`** - {helpers.escape_markdown_v1(p['name'])}\n_({details})_ - {status}\n---\n"
        
        if return_text:
            return text
        _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=inline_keyboards.get_back_button("admin_plan_management"))
    def list_all_gateways(admin_id, message, return_text=False):
        gateways = _db_manager.get_all_payment_gateways()
        if not gateways:
            text = messages.NO_GATEWAYS_FOUND
        else:
            text = messages.LIST_GATEWAYS_HEADER
            for g in gateways:
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if g['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                text += f"**ID: `{g['id']}`** - {helpers.escape_markdown_v1(g['name'])}\n`{g.get('card_number', 'N/A')}` - {status}\n---\n"
        
        if return_text:
            return text
        _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=inline_keyboards.get_back_button("admin_payment_management"))


    def list_all_users(admin_id, message):
        users = _db_manager.get_all_users()
        if not users:
            text = messages.NO_USERS_FOUND
        else:
            total_users = len(users)
            text = f"üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ (–≤—Å–µ–≥–æ: {total_users} —á–µ–ª–æ–≤–µ–∫):**\n\n"

            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–ª–µ–π
            role_map = {
                'admin': 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'reseller': 'ü§ù –†–µ—Å–µ–ª–ª–µ—Ä',
                'user': 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            }

            for user in users:
                first_name = helpers.escape_markdown_v1(user.get('first_name', ''))
                username = helpers.escape_markdown_v1(user.get('username', 'N/A'))

                # –ß—Ç–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏–∑ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ 'role'
                user_role_key = user.get('role', 'user')
                role = role_map.get(user_role_key, 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

                balance = f"{user.get('balance', 0):,.0f} —Ç—É–º–∞–Ω–æ–≤"

                text += (
                    f"**–ò–º—è:** {first_name} (@{username})\n"
                    f"`ID: {user['telegram_id']}`\n"
                    f"**–†–æ–ª—å:** {role} | **–ë–∞–ª–∞–Ω—Å:** {balance}\n"
                    "-----------------------------------\n"
                )

        _show_menu(admin_id, text, inline_keyboards.get_back_button("admin_user_management"), message)

    def test_all_servers(admin_id, message):
        _bot.edit_message_text(messages.TESTING_ALL_SERVERS, admin_id, message.message_id, reply_markup=None)
        servers = _db_manager.get_all_servers(only_active=False) # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
        if not servers:
            _bot.send_message(admin_id, messages.NO_SERVERS_FOUND)
            _show_server_management_menu(admin_id)
            return
            
        results = []
        for s in servers:
            # --- –æ—Å–Ω–æ–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å ---
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ factory –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            api_client = get_api_client(s)
            is_online = False
            if api_client:
                # —Ñ—É–Ω–∫—Ü–∏—è check_login —Ç–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥
                is_online = api_client.check_login()
            # --- –∫–æ–Ω–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ ---

            _db_manager.update_server_status(s['id'], is_online, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            status_emoji = "‚úÖ" if is_online else "‚ùå"
            results.append(f"{status_emoji} {helpers.escape_markdown_v1(s['name'])} (Type: {s['panel_type']})")

        _bot.send_message(admin_id, messages.TEST_RESULTS_HEADER + "\n".join(results), parse_mode='Markdown')
        _show_server_management_menu(admin_id)
    # =============================================================================
    # SECTION: Stateful Process Handlers
    # =============================================================================
    def get_plan_details_from_callback(admin_id, message, plan_type):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ç–∞—Ä–∏—Ñ–∞ –∏ –∑–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å."""
        state_info = _admin_states.get(admin_id, {})
        if state_info.get('state') != 'waiting_for_plan_type': return

        state_info['data']['plan_type'] = plan_type
        
        if plan_type == 'fixed_monthly':
            # –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å - –æ–±—ä–µ–º
            state_info['state'] = 'waiting_for_plan_volume'
            _bot.edit_message_text(messages.ADD_PLAN_PROMPT_VOLUME, admin_id, message.message_id)
        elif plan_type == 'gigabyte_based':
            # –î–ª—è —Ç–∞—Ä–∏—Ñ–∞ –ø–æ –≥–∏–≥–∞–±–∞–π—Ç–∞–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å - —Ü–µ–Ω–∞ –∑–∞ –≥–∏–≥–∞–±–∞–π—Ç
            state_info['state'] = 'waiting_for_per_gb_price'
            _bot.edit_message_text(messages.ADD_PLAN_PROMPT_PER_GB_PRICE, admin_id, message.message_id)
        
        state_info['prompt_message_id'] = message.message_id
    def _handle_stateful_message(admin_id, message):
        # === –ù–æ–≤–∞—è –∏ —É–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ===
        state_info = _admin_states.get(admin_id, {})
        state = state_info.get("state")
        states_to_preserve_message = ['waiting_for_broadcast_message', 'waiting_for_tutorial_forward']
        
        if state not in states_to_preserve_message:
            try:
                # –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
                _bot.delete_message(admin_id, message.message_id)
            except Exception:
                pass
    # === –ö–æ–Ω–µ—Ü –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ ===
        
        prompt_id = state_info.get("prompt_message_id")
        data = state_info.get("data", {})
        text = message.text.strip()

        # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
        if state == 'waiting_for_sample_config':
            process_sample_config_input(admin_id, message)
            return

        # --- Server Flows ---
        if state == 'waiting_for_server_name':
            data['name'] = text
            state_info['state'] = 'waiting_for_panel_type_selection'
            prompt_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞–Ω–µ–ª–∏ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:"
            _bot.edit_message_text(prompt_text, admin_id, prompt_id, reply_markup=inline_keyboards.get_panel_type_selection_menu())
            return

        elif state == 'waiting_for_server_url':
            data['url'] = text
            state_info['state'] = 'waiting_for_server_username'
            _bot.edit_message_text(messages.ADD_SERVER_PROMPT_USERNAME, admin_id, prompt_id)
        elif state == 'waiting_for_server_username':
            data['username'] = text
            state_info['state'] = 'waiting_for_server_password'
            _bot.edit_message_text(messages.ADD_SERVER_PROMPT_PASSWORD, admin_id, prompt_id)
        elif state == 'waiting_for_server_password':
            data['password'] = text
            state_info['state'] = 'waiting_for_sub_base_url'
            _bot.edit_message_text(messages.ADD_SERVER_PROMPT_SUB_BASE_URL, admin_id, prompt_id)
        elif state == 'waiting_for_sub_base_url':
            data['sub_base_url'] = text
            state_info['state'] = 'waiting_for_sub_path_prefix'
            _bot.edit_message_text(messages.ADD_SERVER_PROMPT_SUB_PATH_PREFIX, admin_id, prompt_id)
        elif state == 'waiting_for_sub_path_prefix':
            data['sub_path_prefix'] = text
            execute_add_server(admin_id, data)
        elif state == 'waiting_for_server_id_to_delete':
            process_delete_server_id(admin_id, message)

        # --- Plan Flows ---
        elif state == 'waiting_for_plan_name':
            data['name'] = text
            state_info['state'] = 'waiting_for_plan_type'
            _bot.edit_message_text(messages.ADD_PLAN_PROMPT_TYPE, admin_id, prompt_id, reply_markup=inline_keyboards.get_plan_type_selection_menu_admin())
        elif state == 'waiting_for_plan_volume':
            if not helpers.is_float_or_int(text) or float(text) <= 0:
                _bot.edit_message_text(f"{messages.INVALID_NUMBER_INPUT}\n\n{messages.ADD_PLAN_PROMPT_VOLUME}", admin_id, prompt_id); return
            data['volume_gb'] = float(text)
            state_info['state'] = 'waiting_for_plan_duration'
            _bot.edit_message_text(messages.ADD_PLAN_PROMPT_DURATION, admin_id, prompt_id)
        elif state == 'waiting_for_plan_duration':
            if not text.isdigit() or int(text) < 0:
                _bot.edit_message_text(f"{messages.INVALID_NUMBER_INPUT}\n\n{messages.ADD_PLAN_PROMPT_DURATION}", admin_id, prompt_id); return
            data['duration_days'] = int(text)
            state_info['state'] = 'waiting_for_plan_price'
            _bot.edit_message_text(messages.ADD_PLAN_PROMPT_PRICE, admin_id, prompt_id)
        elif state == 'waiting_for_plan_price':
            if not helpers.is_float_or_int(text) or float(text) < 0:
                _bot.edit_message_text(f"{messages.INVALID_NUMBER_INPUT}\n\n{messages.ADD_PLAN_PROMPT_PRICE}", admin_id, prompt_id); return
            data['price'] = float(text)
            execute_add_plan(admin_id, data)
        elif state == 'waiting_for_per_gb_price':
            if not helpers.is_float_or_int(text) or float(text) <= 0:
                _bot.edit_message_text(f"{messages.INVALID_NUMBER_INPUT}\n\n{messages.ADD_PLAN_PROMPT_PER_GB_PRICE}", admin_id, prompt_id); return
            data['per_gb_price'] = float(text)
            state_info['state'] = 'waiting_for_gb_plan_duration'
            _bot.edit_message_text(messages.ADD_PLAN_PROMPT_DURATION_GB, admin_id, prompt_id)
        elif state == 'waiting_for_gb_plan_duration':
            if not text.isdigit() or int(text) < 0:
                _bot.edit_message_text(f"{messages.INVALID_NUMBER_INPUT}\n\n{messages.ADD_PLAN_PROMPT_DURATION_GB}", admin_id, prompt_id); return
            data['duration_days'] = int(text)
            execute_add_plan(admin_id, data)
        elif state == 'waiting_for_plan_id_to_toggle':
            execute_toggle_plan_status(admin_id, text)
        elif state == 'waiting_for_plan_id_to_delete':
            process_delete_plan_id(admin_id, message)
        elif state == 'waiting_for_plan_id_to_edit':
            process_edit_plan_id(admin_id, message)
        elif state == 'waiting_for_new_plan_name':
            process_edit_plan_name(admin_id, message)
        elif state == 'waiting_for_new_plan_price':
            process_edit_plan_price(admin_id, message)

        # --- Profile Flows ---
        elif state == 'waiting_for_profile_name':
            data['name'] = text
            state_info['state'] = 'waiting_for_profile_per_gb_price'
            _bot.edit_message_text(messages.ADD_PROFILE_PROMPT_PER_GB_PRICE, admin_id, prompt_id)
        elif state == 'waiting_for_profile_per_gb_price':
            if not helpers.is_float_or_int(text) or float(text) <= 0:
                _bot.edit_message_text(f"{messages.INVALID_NUMBER_INPUT}\n\n{messages.ADD_PROFILE_PROMPT_PER_GB_PRICE}", admin_id, prompt_id); return
            data['per_gb_price'] = float(text)
            state_info['state'] = 'waiting_for_profile_duration'
            _bot.edit_message_text(messages.ADD_PROFILE_PROMPT_DURATION, admin_id, prompt_id)
        elif state == 'waiting_for_profile_duration':
            if not text.isdigit() or int(text) <= 0:
                _bot.edit_message_text(f"{messages.INVALID_NUMBER_INPUT}\n\n{messages.ADD_PROFILE_PROMPT_DURATION}", admin_id, prompt_id); return
            data['duration_days'] = int(text)
            state_info['state'] = 'waiting_for_profile_description'
            _bot.edit_message_text(messages.ADD_PROFILE_PROMPT_DESCRIPTION, admin_id, prompt_id)
        elif state == 'waiting_for_profile_description':
            data['description'] = None if text.lower() == 'skip' else text
            execute_add_profile(admin_id, data)

        # --- Gateway Flows ---
        elif state == 'waiting_for_gateway_name':
            data['name'] = text
            state_info['state'] = 'waiting_for_gateway_type'
            _bot.edit_message_text(messages.ADD_GATEWAY_PROMPT_TYPE, admin_id, prompt_id, reply_markup=inline_keyboards.get_gateway_type_selection_menu())
        elif state == 'waiting_for_merchant_id':
            data['merchant_id'] = text
            state_info['state'] = 'waiting_for_gateway_description'
            _bot.edit_message_text(messages.ADD_GATEWAY_PROMPT_DESCRIPTION, admin_id, prompt_id)
        elif state == 'waiting_for_card_number':
            if not text.isdigit() or len(text) != 16:
                _bot.edit_message_text(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.\n\n{messages.ADD_GATEWAY_PROMPT_CARD_NUMBER}", admin_id, prompt_id); return
            data['card_number'] = text
            state_info['state'] = 'waiting_for_card_holder_name'
            _bot.edit_message_text(messages.ADD_GATEWAY_PROMPT_CARD_HOLDER_NAME, admin_id, prompt_id)
        elif state == 'waiting_for_card_holder_name':
            data['card_holder_name'] = text
            state_info['state'] = 'waiting_for_gateway_description'
            _bot.edit_message_text(messages.ADD_GATEWAY_PROMPT_DESCRIPTION, admin_id, prompt_id)
        elif state == 'waiting_for_gateway_description':
            data['description'] = None if text.lower() == 'skip' else text
            execute_add_gateway(admin_id, data)
        elif state == 'waiting_for_gateway_id_to_toggle':
            execute_toggle_gateway_status(admin_id, text)
        elif state == 'waiting_for_gateway_edit_name':
            data['new_name'] = text
            state_info['state'] = 'waiting_for_gateway_edit_type'
            current_gateway = data['current_gateway']
            _bot.edit_message_text(
                f"–ù–æ–≤–æ–µ –∏–º—è: **{text}**\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à–ª—é–∑–∞:",
                admin_id, 
                prompt_id,
                reply_markup=inline_keyboards.get_gateway_type_selection_menu(),
                parse_mode='Markdown'
            )
        elif state == 'waiting_for_gateway_edit_merchant_id':
            data['new_merchant_id'] = text
            state_info['state'] = 'waiting_for_gateway_edit_description'
            _bot.edit_message_text(messages.ADD_GATEWAY_PROMPT_DESCRIPTION, admin_id, prompt_id)
        elif state == 'waiting_for_gateway_edit_card_number':
            if not text.isdigit() or len(text) != 16:
                _bot.edit_message_text(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.\n\n{messages.ADD_GATEWAY_PROMPT_CARD_NUMBER}", admin_id, prompt_id); return
            data['new_card_number'] = text
            state_info['state'] = 'waiting_for_gateway_edit_card_holder_name'
            _bot.edit_message_text(messages.ADD_GATEWAY_PROMPT_CARD_HOLDER_NAME, admin_id, prompt_id)
        elif state == 'waiting_for_gateway_edit_card_holder_name':
            data['new_card_holder_name'] = text
            state_info['state'] = 'waiting_for_gateway_edit_description'
            _bot.edit_message_text(messages.ADD_GATEWAY_PROMPT_DESCRIPTION, admin_id, prompt_id)
        elif state == 'waiting_for_gateway_edit_description':
            data['new_description'] = None if text.lower() == 'skip' else text
            execute_update_gateway(admin_id, data)
            
        # --- Admin Management Flows ---
        elif state == 'waiting_for_admin_id_to_add':
            if not text.isdigit():
                _bot.send_message(admin_id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                return
            target_user_id = int(text)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é set_user_role
            if _db_manager.set_user_role(target_user_id, 'admin'):
                _bot.send_message(admin_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{target_user_id}` —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω –¥–æ —Ä–æ–ª–∏ ¬´–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª.")
            else:
                _bot.send_message(admin_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏.")
            _clear_admin_state(admin_id)
            _show_admin_management_menu(admin_id, message)

        elif state == 'waiting_for_admin_id_to_remove':
            if not text.isdigit():
                _bot.send_message(admin_id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                return
            target_user_id = int(text)
            if target_user_id == admin_id:
                _bot.send_message(admin_id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–æ–ª—å.")
                return
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é set_user_role, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—ã—á–Ω—ã–º
            if _db_manager.set_user_role(target_user_id, 'user'):
                _bot.send_message(admin_id, f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID `{target_user_id}` —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ¬´–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å¬ª.")
            else:
                _bot.send_message(admin_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏.")
            _clear_admin_state(admin_id)
            _show_admin_management_menu(admin_id, message)
        # --- Branding Settings Flows ---
        elif state == 'waiting_for_brand_name':
            new_brand_name = message.text.strip()
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∏–º—è –ø–æ–¥—Ö–æ–¥–∏—Ç
            if not new_brand_name.isalnum():
                _bot.send_message(admin_id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")
                return
            
            _db_manager.update_setting('brand_name', new_brand_name)
            _bot.edit_message_text(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ **{new_brand_name}**.", admin_id, state_info['prompt_message_id'])
            _clear_admin_state(admin_id)
            # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–Ω–æ–≤–∞ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
            show_branding_settings_menu(admin_id, message)
        elif state == 'waiting_for_new_message_text':
            if text.lower() == 'cancel':
                _bot.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", admin_id, state_info['prompt_message_id'])
                _clear_admin_state(admin_id)
                show_message_management_menu(admin_id, message)
                return

            message_key = state_info['data']['message_key']
            if _db_manager.update_bot_message(message_key, text):
                _bot.send_message(admin_id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ `{message_key}` —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            else:
                _bot.send_message(admin_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            
            _clear_admin_state(admin_id)
            show_message_management_menu(admin_id, message)
        elif state == 'waiting_for_balance_adjustment':
            text = message.text.strip()
            target_telegram_id = state_info['data']['target_user_id']
            prompt_id = state_info['prompt_message_id']
            
            
            if text.lower() == 'cancel':
                # –°–æ–æ–±—â–µ–Ω–∏–µ 'cancel' –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –æ–±—â–µ–π –ª–æ–≥–∏–∫–æ–π –≤–≤–µ—Ä—Ö—É —Ñ—É–Ω–∫—Ü–∏–∏
                _bot.send_message(admin_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                _clear_admin_state(admin_id)
                _show_user_management_panel(admin_id, target_telegram_id, prompt_id)
                return

            if not (text.startswith('+') or text.startswith('-')) or not text[1:].isdigit():
                _bot.send_message(admin_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, +50000).")
                return

            try:
                amount = int(text)
                user_info = _db_manager.get_user_by_telegram_id(target_telegram_id)
                if not user_info:
                    _bot.send_message(admin_id, "–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    _clear_admin_state(admin_id)
                    return
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_info['id'], –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤–∏—á–Ω—ã–º –∫–ª—é—á–æ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                if _db_manager.add_to_user_balance(user_info['id'], float(amount)):
                    # === –æ—Å–Ω–æ–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å ===
                    # 1. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—Å—é–¥–∞ —É–¥–∞–ª–µ–Ω–∞.
                    # 2. –í–º–µ—Å—Ç–æ answer_callback_query –∏—Å–ø–æ–ª—å–∑—É–µ–º send_message, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
                    _bot.send_message(admin_id, f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {amount:,.0f} —Ç—É–º–∞–Ω–æ–≤.")
                    _clear_admin_state(admin_id)
                    _show_user_management_panel(admin_id, target_telegram_id, prompt_id)
                else:
                    _bot.send_message(admin_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                    _clear_admin_state(admin_id)
            except Exception as e:
                logger.error(f"Error adjusting balance for user {target_telegram_id}: {e}")
                _bot.send_message(admin_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã.")
                _clear_admin_state(admin_id)
        elif state == 'waiting_for_broadcast_message':
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
            if message.text and message.text.lower() == '/cancel':
                _bot.delete_message(admin_id, message.message_id)
                _bot.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.", admin_id, state_info['prompt_message_id'])
                _clear_admin_state(admin_id)
                _show_admin_main_menu(admin_id)
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            state_info['data']['broadcast_message_id'] = message.message_id
            state_info['data']['broadcast_chat_id'] = message.chat.id
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            state_info['state'] = 'waiting_for_broadcast_confirmation'

            total_users = len(_db_manager.get_all_users())
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ–º—É –∂–µ, —á—Ç–æ–±—ã –æ–Ω —É–≤–∏–¥–µ–ª –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            _bot.send_message(admin_id, "üëá **–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.** üëá")
            _bot.forward_message(admin_id, from_chat_id=message.chat.id, message_id=message.message_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            confirmation_text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ **{total_users}** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?"
            _bot.send_message(admin_id, confirmation_text, reply_markup=inline_keyboards.get_broadcast_confirmation_menu())
        # --- Other Flows ---
        elif state == 'waiting_for_server_id_for_inbounds':
            process_manage_inbounds_flow(admin_id, message)
        elif state == 'waiting_for_tutorial_platform':
            process_tutorial_platform(admin_id, message)
        elif state == 'waiting_for_tutorial_app_name':
            process_tutorial_app_name(admin_id, message)
        elif state == 'waiting_for_tutorial_forward':
            process_tutorial_forward(admin_id, message)
        elif state == 'waiting_for_user_id_to_search':
            process_user_search(admin_id, message)
        elif state == 'waiting_for_channel_id':
            process_set_channel_id(admin_id, message)
        elif state == 'waiting_for_channel_link':
            process_set_channel_link(admin_id, message)
        elif state == 'waiting_for_support_link':
            process_support_link(admin_id, message)
    # =============================================================================
    # SECTION: Process Starters and Callback Handlers
    # =============================================================================
    def start_add_server_flow(admin_id, message):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ —Å –≤–æ–ø—Ä–æ—Å–∞ –æ —Ç–∏–ø–µ –ø–∞–Ω–µ–ª–∏."""
        _clear_admin_state(admin_id) # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        prompt = _show_menu(admin_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞–Ω–µ–ª–∏ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:", inline_keyboards.get_panel_type_selection_menu(), message)
        # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –Ω–∏–∂–µ


    def start_delete_server_flow(admin_id, message):
        _clear_admin_state(admin_id)
        list_text = _generate_server_list_text()
        if list_text == messages.NO_SERVERS_FOUND:
            _bot.edit_message_text(list_text, admin_id, message.message_id, reply_markup=inline_keyboards.get_back_button("admin_server_management")); return
        _admin_states[admin_id] = {'state': 'waiting_for_server_id_to_delete', 'prompt_message_id': message.message_id}
        prompt_text = f"{list_text}\n\n{messages.DELETE_SERVER_PROMPT}"
        _bot.edit_message_text(prompt_text, admin_id, message.message_id, parse_mode='Markdown')

    def start_add_plan_flow(admin_id, message):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞."""
        _clear_admin_state(admin_id)
        # –°–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
        prompt = _show_menu(admin_id, messages.ADD_PLAN_PROMPT_NAME, inline_keyboards.get_back_button("admin_plan_management"), message)
        _admin_states[admin_id] = {'state': 'waiting_for_plan_name', 'data': {}, 'prompt_message_id': prompt.message_id}
    def start_toggle_plan_status_flow(admin_id, message):
        _clear_admin_state(admin_id)
        # --- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å ---
        # –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—é
        plans_text = list_all_plans(admin_id, message, return_text=True)
        _bot.edit_message_text(f"{plans_text}\n\n{messages.TOGGLE_PLAN_STATUS_PROMPT}", admin_id, message.message_id, parse_mode='Markdown')
        _admin_states[admin_id] = {'state': 'waiting_for_plan_id_to_toggle', 'prompt_message_id': message.message_id}
        
    def start_add_gateway_flow(admin_id, message):
        _clear_admin_state(admin_id)
        _admin_states[admin_id] = {'state': 'waiting_for_gateway_name', 'data': {}, 'prompt_message_id': message.message_id}
        _bot.edit_message_text(messages.ADD_GATEWAY_PROMPT_NAME, admin_id, message.message_id)
        
    def start_toggle_gateway_status_flow(admin_id, message):
        _clear_admin_state(admin_id)
        # --- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å ---
        # –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—é
        gateways_text = list_all_gateways(admin_id, message, return_text=True)
        _bot.edit_message_text(f"{gateways_text}\n\n{messages.TOGGLE_GATEWAY_STATUS_PROMPT}", admin_id, message.message_id, parse_mode='Markdown')
        _admin_states[admin_id] = {'state': 'waiting_for_gateway_id_to_toggle', 'prompt_message_id': message.message_id}

    def start_edit_gateway_flow(admin_id, message):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞"""
        _clear_admin_state(admin_id)
        gateways = _db_manager.get_all_payment_gateways()
        if not gateways:
            _bot.edit_message_text("‚ùå –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —à–ª—é–∑—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", admin_id, message.message_id)
            return
        
        _bot.edit_message_text(
            "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —à–ª—é–∑, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
            admin_id, 
            message.message_id,
            reply_markup=inline_keyboards.get_gateway_selection_menu_for_edit(gateways)
        )

    def start_delete_gateway_flow(admin_id, message):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞"""
        _clear_admin_state(admin_id)
        gateways = _db_manager.get_all_payment_gateways()
        if not gateways:
            _bot.edit_message_text("‚ùå –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —à–ª—é–∑—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", admin_id, message.message_id)
            return
        
        _bot.edit_message_text(
            "üóëÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —à–ª—é–∑, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
            admin_id, 
            message.message_id,
            reply_markup=inline_keyboards.get_gateway_selection_menu_for_delete(gateways)
        )

    def start_gateway_edit_flow(admin_id, message, gateway_id):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞"""
        gateway = _db_manager.get_payment_gateway_by_id(gateway_id)
        if not gateway:
            _bot.answer_callback_query(message.id, "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —à–ª—é–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        _clear_admin_state(admin_id)
        _admin_states[admin_id] = {
            'state': 'waiting_for_gateway_edit_name',
            'data': {'gateway_id': gateway_id, 'current_gateway': gateway},
            'prompt_message_id': message.message_id
        }
        
        current_name = gateway['name']
        current_type = gateway['type']
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —à–ª—é–∑–∞
        current_config_text = ""
        if current_type == 'zarinpal':
            merchant_id = gateway.get('merchant_id', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ')
            current_config_text = f"Merchant ID: {merchant_id}"
        elif current_type == 'card_to_card':
            card_number = gateway.get('card_number', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ')
            card_holder = gateway.get('card_holder_name', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ')
            current_config_text = f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card_number}\n–í–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã: {card_holder}"
        
        edit_text = (
            f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞**\n\n"
            f"**–¢–µ–∫—É—â–∏–π —à–ª—é–∑:** {current_name}\n"
            f"**–¢–∏–ø:** {current_type}\n"
            f"**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n{current_config_text}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —à–ª—é–∑–∞ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ –∂–µ –∏–º—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ):"
        )
        
        _bot.edit_message_text(edit_text, admin_id, message.message_id, parse_mode='Markdown')



    # =============================================================================
    # SECTION: Main Bot Handlers
    # =============================================================================

    @_bot.message_handler(commands=['admin'])
    def handle_admin_command(message):
        if not helpers.is_admin(message.from_user.id):
            _bot.reply_to(message, messages.NOT_ADMIN_ACCESS); return
        try: _bot.delete_message(message.chat.id, message.message_id)
        except Exception: pass
        _clear_admin_state(message.from_user.id)
        _show_admin_main_menu(message.from_user.id)
    
    @_bot.message_handler(content_types=['text'], func=lambda msg: helpers.is_admin(msg.from_user.id) and _admin_states.get(msg.from_user.id, {}).get('state') == 'waiting_for_api_key')
    def handle_api_key_input(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ API Key"""
        process_api_key_input(message)
    
    @_bot.callback_query_handler(func=lambda call: helpers.is_admin(call.from_user.id))
    def handle_admin_callbacks(call):
        """–≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∫–ª–∏–∫–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        _bot.answer_callback_query(call.id)
        admin_id, message, data = call.from_user.id, call.message, call.data
        state_info = _admin_states.get(admin_id, {})

        actions = {
            "admin_broadcast": start_broadcast_flow,
            "admin_message_management": lambda a_id, msg: show_message_management_menu(a_id, msg, page=1),
            "admin_main_menu": lambda a_id, msg: (_clear_admin_state(a_id), _show_admin_main_menu(a_id, msg)),
            "admin_server_management": _show_server_management_menu,
            "admin_plan_management": lambda a_id, msg: (_clear_admin_state(a_id), _show_plan_management_menu(a_id, msg)),
            "admin_profile_management": _show_profile_management_menu,
            "admin_payment_management": _show_payment_gateway_management_menu,
            "admin_user_management": _show_user_management_menu,
            "admin_add_server": start_add_server_flow,
            "admin_list_servers": list_all_servers,
            "admin_delete_server": start_delete_server_flow,
            "admin_test_all_servers": test_all_servers,
            "admin_manage_inbounds": start_manage_inbounds_flow,
            "admin_add_plan": start_add_plan_flow,
            "admin_list_plans": list_all_plans,
            "admin_delete_plan": start_delete_plan_flow,
            "admin_edit_plan": start_edit_plan_flow,
            "admin_toggle_plan_status": start_toggle_plan_status_flow,
            "admin_add_gateway": start_add_gateway_flow,
            "admin_list_gateways": list_all_gateways,
            "admin_toggle_gateway_status": start_toggle_gateway_status_flow,
            "admin_edit_gateway": start_edit_gateway_flow,
            "admin_delete_gateway": start_delete_gateway_flow,
            "admin_list_users": list_all_users,
            "admin_search_user": start_search_user_flow,
            "admin_channel_lock_management": show_channel_lock_menu,
            "admin_set_channel_lock": start_set_channel_lock_flow,
            "admin_remove_channel_lock": execute_remove_channel_lock,
            "admin_tutorial_management": show_tutorial_management_menu,
            "admin_add_tutorial": start_add_tutorial_flow,
            "admin_list_tutorials": list_tutorials,
            "admin_support_management": show_support_management_menu,
            "admin_edit_support_link": start_edit_support_link_flow,
            "admin_add_profile": start_add_profile_flow,
            "admin_list_profiles": list_all_profiles,
            "admin_manage_profile_inbounds": start_manage_profile_inbounds_flow,
            "admin_manage_admins": _show_admin_management_menu,
            "admin_add_admin": start_add_admin_flow,
            "admin_remove_admin": start_remove_admin_flow,
            "admin_check_nginx": check_nginx_status,
            "admin_health_check": run_system_health_check,
            "admin_webhook_setup": start_webhook_setup_flow,
            "admin_create_backup": create_backup,
            "admin_check_subscription_links": check_and_fix_subscription_links,
            "admin_refresh_all_subscriptions": refresh_all_subscription_links,
            "admin_subscription_system_status": show_subscription_system_status,
            "admin_test_config_builder": show_config_builder_test_menu,
            "admin_create_config_menu": show_config_creator_menu,
            "admin_log_full_json": show_json_logger_menu,
            "admin_set_api_key": start_set_api_key_flow,
            "admin_update_configs": update_configs_from_panel,
        }

        if data in actions:
            actions[data](admin_id, message)
            return
        # --- Broadcast Confirmation Logic ---
        if data == "admin_cancel_broadcast":
            _clear_admin_state(admin_id)
            _bot.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.", admin_id, message.message_id)
            _show_admin_main_menu(admin_id)
            return

        elif data == "admin_confirm_broadcast":
            state_info = _admin_states.get(admin_id, {})
            if state_info.get('state') != 'waiting_for_broadcast_confirmation':
                _bot.answer_callback_query(call.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
                return

            broadcast_message_id = state_info['data']['broadcast_message_id']
            broadcast_chat_id = state_info['data']['broadcast_chat_id']
            _clear_admin_state(admin_id)

            all_users = _db_manager.get_all_users()
            total_users = len(all_users)

            _bot.edit_message_text(f"‚è≥ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è **{total_users}** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...", admin_id, message.message_id, parse_mode='Markdown')

            successful_sends = 0
            failed_sends = 0

            for user in all_users:
                try:
                    _bot.forward_message(
                        chat_id=user['telegram_id'],
                        from_chat_id=broadcast_chat_id,
                        message_id=broadcast_message_id
                    )
                    successful_sends += 1
                except Exception as e:
                    failed_sends += 1
                    logger.error(f"Failed to send broadcast to user {user['telegram_id']}: {e}")

                # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                # import time
                # time.sleep(0.1)

            report_text = (
                f"üì£ **–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ**\n\n"
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: **{successful_sends}**\n"
                f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: **{failed_sends}**\n"
                f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**"
            )
            _bot.send_message(admin_id, report_text, parse_mode='Markdown')
            _show_admin_main_menu(admin_id) # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–Ω–æ–≤–∞
            return
        # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ ---
        if data == "admin_manage_templates":
            show_template_management_menu(admin_id, message)
            return
        elif data.startswith("admin_test_config_server_"):
            server_id = int(data.split('_')[-1])
            logger.info(f"Testing config builder for server {server_id}")
            test_config_builder_for_server(admin_id, message, server_id)
            return
        elif data.startswith("admin_test_config_inbound_"):
            parts = data.split('_')
            server_id = int(parts[4])
            inbound_id = int(parts[5])
            logger.info(f"Testing config builder for server {server_id}, inbound {inbound_id}")
            test_config_builder_for_inbound(admin_id, message, server_id, inbound_id)
            return
        elif data.startswith("admin_create_config_server_"):
            server_id = int(data.split('_')[-1])
            show_inbound_selection_for_config(admin_id, message, server_id)
            return
        elif data.startswith("admin_create_config_inbound_"):
            parts = data.split('_')
            server_id = int(parts[4])
            inbound_id = int(parts[5])
            create_configs_for_inbound(admin_id, message, server_id, inbound_id)
            return
        elif data.startswith("admin_log_json_server_"):
            server_id = int(data.split('_')[-1])
            show_inbound_selection_for_json_log(admin_id, message, server_id)
            return
        elif data.startswith("admin_log_json_inbound_"):
            parts = data.split('_')
            server_id = int(parts[4])
            inbound_id = int(parts[5])
            log_full_json_for_inbound(admin_id, message, server_id, inbound_id)
            return
        elif data.startswith("admin_edit_template_"):
            parts = data.split('_')
            server_id = int(parts[3])
            inbound_id = int(parts[4])
            server_data = _db_manager.get_server_by_id(server_id)
            inbound_info_db = _db_manager.get_server_inbound_details(server_id, inbound_id)
            inbound_info = {'id': inbound_id, 'remark': inbound_info_db.get('remark', '') if inbound_info_db else ''}
            context = {'type': 'server', 'server_id': server_id, 'server_name': server_data['name']}
            start_sample_config_flow(admin_id, message, [inbound_info], context)
            return
        # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–º ---
        elif data == "admin_branding_settings":
            show_branding_settings_menu(admin_id, message)
            return
        elif data == "admin_change_brand_name":
            start_change_brand_name_flow(admin_id, message)
            return
        # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ---
        if data == "admin_msg_page_":
            show_message_management_menu(admin_id, message, page=1)
            return
        elif data.startswith("admin_msg_page_"):
            page = int(data.split('_')[-1])
            show_message_management_menu(admin_id, message, page=page)
            return
        elif data.startswith("admin_edit_msg_"):
            message_key = data.replace("admin_edit_msg_", "", 1)
            start_edit_message_flow(admin_id, message, message_key)
            return
        elif data.startswith("admin_view_subs_"):
            target_user_id = int(data.split('_')[-1])
            purchases = _db_manager.get_user_purchases_by_telegram_id(target_user_id)
            user_info = _db_manager.get_user_by_telegram_id(target_user_id)
            first_name = helpers.escape_markdown_v1(user_info.get('first_name', ''))

            text = f"üóÇÔ∏è **–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name}:**\n\n"
            if not purchases:
                text += "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫."
            else:
                for p in purchases:
                    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if p['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                    expire = p['expire_date'].strftime('%Y-%m-%d') if p.get('expire_date') else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"
                    server_name = helpers.escape_markdown_v1(p.get('server_name', 'N/A'))

                    text += (
                        f"{status} **ID —Å–µ—Ä–≤–∏—Å–∞:** `{p['id']}`\n"
                        f"   - **–°–µ—Ä–≤–µ—Ä:** {server_name}\n"
                        f"   - **–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:** {expire}\n"
                        "--------------------\n"
                    )

            markup = inline_keyboards.get_admin_subs_list_menu(target_user_id)
            _bot.edit_message_text(text, admin_id, message.message_id, reply_markup=markup, parse_mode='Markdown')
            return
                # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π ---
        elif data == "admin_manage_profile_templates":
            show_profile_template_management_menu(admin_id, message)
            return
        elif data.startswith("admin_edit_profile_template_"):
            parts = data.split('_')
            profile_id, server_id, inbound_id = int(parts[4]), int(parts[5]), int(parts[6])
            server_data = _db_manager.get_server_by_id(server_id)
            profile_data = _db_manager.get_profile_by_id(profile_id)
            inbound_info_db = _db_manager.get_server_inbound_details(server_id, inbound_id)
            inbound_info = {'id': inbound_id, 'remark': inbound_info_db.get('remark', '') if inbound_info_db else ''}
            context = {
                'type': 'profile', 'profile_id': profile_id, 'profile_name': profile_data['name'],
                'server_id': server_id, 'server_name': server_data['name']
            }
            start_sample_config_flow(admin_id, message, [inbound_info], context)
            return
        elif data == "admin_view_profile_db":
            show_profile_inbounds_db_status(admin_id, message)
            return
        # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏ ---
        elif data.startswith("admin_approve_payment_"):
            process_payment_approval(admin_id, int(data.split('_')[-1]), message)
            return
        elif data.startswith("admin_reject_payment_"):
            process_payment_rejection(admin_id, int(data.split('_')[-1]), message)
            return

        # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏–º–∏ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ) ---
        elif data.startswith("inbound_save_"):
            server_id = int(data.split('_')[-1])
            execute_save_inbounds(admin_id, message, server_id)
            return
        elif data.startswith("admin_pi_save_"):
            parts = data.split('_')
            profile_id, server_id = int(parts[3]), int(parts[4])
            execute_save_profile_inbounds(admin_id, message, profile_id, server_id)
            return

        # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º –≤—Ö–æ–¥—è—â–∏—Ö (–æ—Ç–º–µ—Ç–∫–∞) ---
        elif data.startswith("inbound_toggle_"):
            handle_inbound_selection(admin_id, call)
            return
        elif data.startswith("admin_pi_toggle_"):
            parts = data.split('_')
            profile_id, server_id, inbound_id = int(parts[3]), int(parts[4]), int(parts[5])
            handle_profile_inbound_toggle(admin_id, message, profile_id, server_id, inbound_id)
            return
        
        # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ---
        elif data.startswith("admin_select_profile_"):
            profile_id = int(data.split('_')[-1])
            handle_profile_selection(admin_id, message, profile_id)
            return
        elif data.startswith("admin_ps_"): # Profile Server Selection
            parts = data.split('_')
            profile_id, server_id = int(parts[2]), int(parts[3])
            handle_server_selection_for_profile(admin_id, message, profile_id, server_id)
            return

        # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è–º–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º ---
        elif data.startswith("confirm_delete_server_"):
            execute_delete_server(admin_id, message, int(data.split('_')[-1]))
            return
        elif data.startswith("confirm_delete_plan_"):
            execute_delete_plan(admin_id, message, int(data.split('_')[-1]))
            return
        elif data.startswith("admin_delete_purchase_"):
            parts = data.split('_')
            purchase_id, user_telegram_id = int(parts[3]), int(parts[4])
            execute_delete_purchase(admin_id, message, purchase_id, user_telegram_id)
            return
        elif data.startswith("admin_delete_tutorial_"):
            execute_delete_tutorial(admin_id, message, int(data.split('_')[-1]))
            return
        

        # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ —Ç–∞—Ä–∏—Ñ–∞ –∏ —à–ª—é–∑–∞ ---
        elif data.startswith("plan_type_"):
            get_plan_details_from_callback(admin_id, message, data.replace("plan_type_", ""))
            return
        elif data.startswith("gateway_type_"):
            handle_gateway_type_selection(admin_id, message, data.replace('gateway_type_', ''))
            return
        elif data.startswith("admin_edit_gateway_"):
            gateway_id = int(data.split('_')[-1])
            start_gateway_edit_flow(admin_id, message, gateway_id)
            return
        elif data.startswith("admin_delete_gateway_"):
            gateway_id = int(data.split('_')[-1])
            gateway = _db_manager.get_payment_gateway_by_id(gateway_id)
            if gateway:
                _bot.edit_message_text(
                    f"üóëÔ∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞**\n\n"
                    f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —à–ª—é–∑ **{gateway['name']}**?\n\n"
                    f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
                    admin_id,
                    message.message_id,
                    reply_markup=inline_keyboards.get_gateway_delete_confirmation_menu(gateway_id, gateway['name']),
                    parse_mode='Markdown'
                )
            else:
                _bot.answer_callback_query(call.id, "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —à–ª—é–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        elif data.startswith("admin_confirm_delete_gateway_"):
            gateway_id = int(data.split('_')[-1])
            if _db_manager.delete_payment_gateway(gateway_id):
                _bot.answer_callback_query(call.id, "‚úÖ –ü–ª–∞—Ç–µ–∂–Ω—ã–π —à–ª—é–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
                _show_payment_gateway_management_menu(admin_id, message)
            else:
                _bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–ª—é–∑–∞.", show_alert=True)
            return
        elif data.startswith("panel_type_"):
            handle_panel_type_selection(call)
            return
        # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—å—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        if data.startswith("admin_manage_user_"):
            target_user_id = int(data.split('_')[-1])
            # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏
            _show_user_management_panel(admin_id, target_user_id, message.message_id)
            return

        elif data.startswith("admin_change_role_"):
            target_user_id = int(data.split('_')[-1])
            user_info = _db_manager.get_user_by_telegram_id(target_user_id)
            first_name = helpers.escape_markdown_v1(user_info.get('first_name', ''))
            _bot.edit_message_text(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{first_name}**:",
                admin_id, message.message_id,
                reply_markup=inline_keyboards.get_change_role_menu(target_user_id),
                parse_mode='Markdown'
            )
            return

        elif data.startswith("admin_set_role_"):
            parts = data.split('_')
            target_user_id = int(parts[3])
            new_role = parts[4]
            
            if _db_manager.set_user_role(target_user_id, new_role):
                _bot.answer_callback_query(call.id, f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}.")
            else:
                _bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏.", show_alert=True)
            
            # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            _show_user_management_panel(admin_id, target_user_id, message.message_id)
            return
        elif data.startswith("admin_adjust_balance_"):
            target_user_id = int(data.split('_')[-1])
            user_info = _db_manager.get_user_by_telegram_id(target_user_id)
            first_name = helpers.escape_markdown_v1(user_info.get('first_name', ''))

            prompt_text = (
                f"üí∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è:** {first_name}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏–ª–∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è.\n\n"
                "**–ü—Ä–∏–º–µ—Ä:**\n"
                "–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–∞ 50,000 —Ç—É–º–∞–Ω–æ–≤: `+50000`\n"
                "–î–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞ 10,000 —Ç—É–º–∞–Ω–æ–≤: `-10000`\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `cancel`."
            )

            # –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º message.message_id, –ø–æ—Ç–æ–º—É —á—Ç–æ prompt - —ç—Ç–æ —Ç–æ –∂–µ —Å–∞–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
            _bot.edit_message_text(
                prompt_text,
                admin_id,
                message.message_id,
                reply_markup=None, # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å
                parse_mode='Markdown'
            )

            _admin_states[admin_id] = {
                'state': 'waiting_for_balance_adjustment',
                'data': {'target_user_id': target_user_id},
                'prompt_message_id': message.message_id
            }
            return
                # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –Ω–µ –ø–æ–¥–æ—à–µ–ª
        else:
            _bot.edit_message_text(messages.UNDER_CONSTRUCTION, admin_id, message.message_id, reply_markup=inline_keyboards.get_back_button("admin_main_menu"))
    @_bot.message_handler(
    content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'sticker'],
    func=lambda msg: helpers.is_admin(msg.from_user.id) and _admin_states.get(msg.from_user.id, {}).get('state')
        )
    def handle_admin_stateful_messages(message):
        admin_id = message.from_user.id
        # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—é–¥–∞ —É–¥–∞–ª—è–µ—Ç—Å—è
        _handle_stateful_message(admin_id, message)
        
        


    # =============================================================================
# SECTION: Final Execution Functions
# =============================================================================

    def execute_add_server(admin_id, data):
        _clear_admin_state(admin_id)
        msg = _bot.send_message(admin_id, messages.ADD_SERVER_TESTING)
        temp_xui_client = _xui_api(panel_url=data['url'], username=data['username'], password=data['password'])
        if temp_xui_client.login():
            server_id = _db_manager.add_server(data['name'], data['url'], data['username'], data['password'], data['sub_base_url'], data['sub_path_prefix'])
            if server_id:
                _db_manager.update_server_status(server_id, True, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                _bot.edit_message_text(messages.ADD_SERVER_SUCCESS.format(server_name=data['name']), admin_id, msg.message_id)
            else:
                _bot.edit_message_text(messages.ADD_SERVER_DB_ERROR.format(server_name=data['name']), admin_id, msg.message_id)
        else:
            _bot.edit_message_text(messages.ADD_SERVER_LOGIN_FAILED.format(server_name=data['name']), admin_id, msg.message_id)
        _show_server_management_menu(admin_id)

    def execute_delete_server(admin_id, message, server_id):
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        _clear_admin_state(admin_id)
        
        server = _db_manager.get_server_by_id(server_id)
        if server and _db_manager.delete_server(server_id):
            _bot.edit_message_text(messages.SERVER_DELETED_SUCCESS.format(server_name=server['name']), admin_id, message.message_id, reply_markup=inline_keyboards.get_back_button("admin_server_management"))
        else:
            _bot.edit_message_text(messages.SERVER_DELETED_ERROR, admin_id, message.message_id, reply_markup=inline_keyboards.get_back_button("admin_server_management"))

    def execute_add_plan(admin_id, data):
        _clear_admin_state(admin_id)
        plan_id = _db_manager.add_plan(
            name=data.get('name'), plan_type=data.get('plan_type'),
            volume_gb=data.get('volume_gb'), duration_days=data.get('duration_days'),
            price=data.get('price'), per_gb_price=data.get('per_gb_price')
        )
        msg_to_send = messages.ADD_PLAN_SUCCESS if plan_id else messages.ADD_PLAN_DB_ERROR
        _bot.send_message(admin_id, msg_to_send.format(plan_name=data['name']))
        _show_plan_management_menu(admin_id)
        
    def execute_add_gateway(admin_id, data):
        _clear_admin_state(admin_id)
        gateway_id = _db_manager.add_payment_gateway(
            name=data.get('name'),
            gateway_type=data.get('gateway_type'),  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            card_number=data.get('card_number'),
            card_holder_name=data.get('card_holder_name'),
            merchant_id=data.get('merchant_id'),    # <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ
            description=data.get('description'),
            priority=0
        )
        
        msg_to_send = messages.ADD_GATEWAY_SUCCESS if gateway_id else messages.ADD_GATEWAY_DB_ERROR
        _bot.send_message(admin_id, msg_to_send.format(gateway_name=data['name']))
        _show_payment_gateway_management_menu(admin_id)

    def execute_update_gateway(admin_id, data):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞"""
        _clear_admin_state(admin_id)
        
        gateway_id = data.get('gateway_id')
        new_name = data.get('new_name')
        new_gateway_type = data.get('new_gateway_type')
        new_description = data.get('new_description')
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —à–ª—é–∑–∞
        card_number = None
        card_holder_name = None
        merchant_id = None
        
        if new_gateway_type == 'zarinpal':
            merchant_id = data.get('new_merchant_id')
        elif new_gateway_type == 'card_to_card':
            card_number = data.get('new_card_number')
            card_holder_name = data.get('new_card_holder_name')
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–ª—é–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = _db_manager.update_payment_gateway(
            gateway_id=gateway_id,
            name=new_name,
            gateway_type=new_gateway_type,
            card_number=card_number,
            card_holder_name=card_holder_name,
            merchant_id=merchant_id,
            description=new_description
        )
        
        if success:
            _bot.send_message(admin_id, f"‚úÖ –ü–ª–∞—Ç–µ–∂–Ω—ã–π —à–ª—é–∑ **{new_name}** —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω.")
        else:
            _bot.send_message(admin_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–ª—é–∑–∞.")
        
        _show_payment_gateway_management_menu(admin_id)

    def execute_toggle_plan_status(admin_id, plan_id_str: str): # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ text
        _clear_admin_state(admin_id)
        if not plan_id_str.isdigit() or not (plan := _db_manager.get_plan_by_id(int(plan_id_str))):
            _bot.send_message(admin_id, messages.PLAN_NOT_FOUND)
            _show_plan_management_menu(admin_id)
            return
        new_status = not plan['is_active']
        if _db_manager.update_plan_status(plan['id'], new_status):
            _bot.send_message(admin_id, messages.PLAN_STATUS_TOGGLED_SUCCESS.format(plan_name=plan['name'], new_status="–∞–∫—Ç–∏–≤–µ–Ω" if new_status else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"))
        else:
            _bot.send_message(admin_id, messages.PLAN_STATUS_TOGGLED_ERROR.format(plan_name=plan['name']))
        _show_plan_management_menu(admin_id)
        
    def execute_toggle_gateway_status(admin_id, gateway_id_str: str): # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ text
        _clear_admin_state(admin_id)
        if not gateway_id_str.isdigit() or not (gateway := _db_manager.get_payment_gateway_by_id(int(gateway_id_str))):
            _bot.send_message(admin_id, messages.GATEWAY_NOT_FOUND)
            _show_payment_gateway_management_menu(admin_id)
            return
        new_status = not gateway['is_active']
        if _db_manager.update_payment_gateway_status(gateway['id'], new_status):
            _bot.send_message(admin_id, messages.GATEWAY_STATUS_TOGGLED_SUCCESS.format(gateway_name=gateway['name'], new_status="–∞–∫—Ç–∏–≤–µ–Ω" if new_status else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"))
        else:
            _bot.send_message(admin_id, messages.GATEWAY_STATUS_TOGGLED_ERROR.format(gateway_name=gateway['name']))
        _show_payment_gateway_management_menu(admin_id)
        # =============================================================================
    # SECTION: Process-Specific Helper Functions
    # =============================================================================

    def _generate_server_list_text():
        servers = _db_manager.get_all_servers()
        if not servers: return messages.NO_SERVERS_FOUND
        response_text = messages.LIST_SERVERS_HEADER
        for s in servers:
            status = "‚úÖ –æ–Ω–ª–∞–π–Ω" if s['is_online'] else "‚ùå –æ—Ñ—Ñ–ª–∞–π–Ω"
            is_active_emoji = "‚úÖ" if s['is_active'] else "‚ùå"
            sub_link = f"{s['subscription_base_url'].rstrip('/')}/{s['subscription_path_prefix'].strip('/')}/<SUB_ID>"
            response_text += messages.SERVER_DETAIL_TEMPLATE.format(
                name=helpers.escape_markdown_v1(s['name']), id=s['id'], status=status, is_active_emoji=is_active_emoji, sub_link=helpers.escape_markdown_v1(sub_link)
            )
        return response_text

    
    def handle_inbound_selection(admin_id, call):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        data = call.data
        parts = data.split('_')
        action = parts[1]

        state_info = _admin_states.get(admin_id)
        if not state_info: return

        server_id = None
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ server_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
        if action == 'toggle':
            # –§–æ—Ä–º–∞—Ç: inbound_toggle_{server_id}_{inbound_id}
            if len(parts) == 4:
                server_id = int(parts[2])
        else: # –¥–ª—è select, deselect, save
            # –§–æ—Ä–º–∞—Ç: inbound_select_all_{server_id}
            server_id = int(parts[-1])

        if server_id is None or state_info.get('state') != f'selecting_inbounds_for_{server_id}':
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        selected_ids = state_info['data'].get('selected_inbound_ids', [])
        panel_inbounds = state_info['data'].get('panel_inbounds', [])

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
        if action == 'toggle':
            inbound_id_to_toggle = int(parts[3])
            if inbound_id_to_toggle in selected_ids:
                selected_ids.remove(inbound_id_to_toggle)
            else:
                selected_ids.append(inbound_id_to_toggle)
        
        elif action == 'select' and parts[2] == 'all':
            panel_ids = {p['id'] for p in panel_inbounds}
            selected_ids.extend([pid for pid in panel_ids if pid not in selected_ids])
            selected_ids = list(set(selected_ids)) # —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        
        elif action == 'deselect' and parts[2] == 'all':
            selected_ids.clear()
            
        elif action == 'save':
            save_inbound_changes(admin_id, call.message, server_id, selected_ids)
            return
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        state_info['data']['selected_inbound_ids'] = selected_ids
        markup = inline_keyboards.get_inbound_selection_menu(server_id, panel_inbounds, selected_ids)
        
        try:
            _bot.edit_message_reply_markup(chat_id=admin_id, message_id=call.message.message_id, reply_markup=markup)
        except telebot.apihelper.ApiTelegramException as e:
            if 'message is not modified' not in e.description:
                logger.warning(f"Error updating inbound selection keyboard: {e}")

    def process_payment_approval(admin_id, payment_id, message):
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ä—É—á–Ω–æ–π –ø–ª–∞—Ç–µ–∂ –∏, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–∫—É–ø–∫–∏ (–æ–±—ã—á–Ω–∞—è –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å),
        –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏. (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        """
        payment = _db_manager.get_payment_by_id(payment_id)
        
        if not payment or payment['is_confirmed']:
            try:
                # message.id –∑–¥–µ—Å—å - —ç—Ç–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ –∫–ª–∏–∫–∞. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É.
                _bot.answer_callback_query(message.id, "–≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
            except Exception:
                pass
            return

        order_details = json.loads(payment['order_details_json'])
        user_telegram_id = order_details['user_telegram_id']
        user_db_id = order_details['user_db_id']
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        _db_manager.update_payment_status(payment_id, True, admin_id)
        try:
            admin_user = _bot.get_chat_member(admin_id, admin_id).user
            admin_username = f"@{admin_user.username}" if admin_user.username else admin_user.first_name
            new_caption = (message.caption or "") + "\n\n" + messages.ADMIN_PAYMENT_CONFIRMED_DISPLAY.format(admin_username=admin_username)
            _bot.edit_message_caption(new_caption, message.chat.id, message.message_id, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")

        # --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –ø–æ–∫—É–ø–∫–∏ ---
        if order_details.get('purchase_type') == 'profile':
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è, –≤—ã–∑–æ–≤–∏—Ç–µ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é
            finalize_profile_purchase(_bot, _db_manager, user_telegram_id, order_details)
        elif order_details.get('purchase_type') == 'wallet_charge':
            amount = order_details['total_price']
            if _db_manager.add_to_user_balance(user_db_id, amount):
                _bot.send_message(user_telegram_id, f"‚úÖ –í–∞—à –∫–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:,.0f} —Ç—É–º–∞–Ω–æ–≤.")
            else:
                _bot.send_message(user_telegram_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞, —Å–ø—Ä–æ—Å–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            prompt = _bot.send_message(user_telegram_id, messages.ASK_FOR_CUSTOM_CONFIG_NAME)
            _user_states[user_telegram_id] = {
                'state': 'waiting_for_custom_config_name',
                'data': order_details,
                'prompt_message_id': prompt.message_id
            }

    def process_payment_rejection(admin_id, payment_id, message):
        payment = _db_manager.get_payment_by_id(payment_id)
        if not payment or payment['is_confirmed']:
            _bot.answer_callback_query(message.id, "–≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True); return
        _db_manager.update_payment_status(payment_id, False, admin_id)
        admin_user = _bot.get_chat_member(admin_id, admin_id).user
        new_caption = message.caption + "\n\n" + messages.ADMIN_PAYMENT_REJECTED_DISPLAY.format(admin_username=f"@{admin_user.username}" if admin_user.username else admin_user.first_name)
        _bot.edit_message_caption(new_caption, message.chat.id, message.message_id, parse_mode='Markdown')
        order_details = json.loads(payment['order_details_json'])
        _bot.send_message(order_details['user_telegram_id'], messages.PAYMENT_REJECTED_USER.format(support_link=SUPPORT_CHANNEL_LINK))
        
        
    def save_inbound_changes(admin_id, message, server_id, selected_ids):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å."""
        server_data = _db_manager.get_server_by_id(server_id)
        panel_inbounds = _admin_states.get(admin_id, {}).get('data', {}).get('panel_inbounds', [])
        
        inbounds_to_save = [
            {'id': p_in['id'], 'remark': p_in.get('remark', '')}
            for p_in in panel_inbounds if p_in['id'] in selected_ids
        ]
        
        # –°–Ω–∞—á–∞–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if _db_manager.update_server_inbounds(server_id, inbounds_to_save):
            msg = messages.INBOUND_CONFIG_SUCCESS
        else:
            msg = messages.INBOUND_CONFIG_FAILED

        # –ó–∞—Ç–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        _bot.edit_message_text(
            msg.format(server_name=server_data['name']),
            admin_id,
            message.message_id,
            reply_markup=inline_keyboards.get_back_button("admin_server_management")
        )
        
        # –ù–∞–∫–æ–Ω–µ—Ü, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—á–∏—â–∞–µ—Ç—Å—è
        _clear_admin_state(admin_id)
    def start_manage_inbounds_flow(admin_id, message):
        _clear_admin_state(admin_id)
        servers = _db_manager.get_all_servers(only_active=False) 
        if not servers:
            _bot.edit_message_text(messages.NO_SERVERS_FOUND, admin_id, message.message_id, reply_markup=inline_keyboards.get_back_button("admin_server_management"))
            return
        
        server_list_text = "\n".join([f"ID: `{s['id']}` - {helpers.escape_markdown_v1(s['name'])}" for s in servers])
        prompt_text = f"**–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:**\n{server_list_text}\n\n{messages.SELECT_SERVER_FOR_INBOUNDS_PROMPT}"
        
        prompt = _show_menu(admin_id, prompt_text, inline_keyboards.get_back_button("admin_server_management"), message)
        _admin_states[admin_id] = {'state': 'waiting_for_server_id_for_inbounds', 'prompt_message_id': prompt.message_id}

    def process_manage_inbounds_flow(admin_id, message):
        """
        –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –µ–≥–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–∑ –ø–∞–Ω–µ–ª–∏.
        (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API Factory)
        """
        state_info = _admin_states.get(admin_id, {})
        if state_info.get('state') != 'waiting_for_server_id_for_inbounds': return

        server_id_str = message.text.strip()
        prompt_id = state_info.get('prompt_message_id')
        try: _bot.delete_message(admin_id, message.message_id)
        except Exception: pass
        
        if not server_id_str.isdigit() or not (server_data := _db_manager.get_server_by_id(int(server_id_str))):
            _bot.edit_message_text(f"{messages.SERVER_NOT_FOUND}\n\n{messages.SELECT_SERVER_FOR_INBOUNDS_PROMPT}", admin_id, prompt_id, parse_mode='Markdown')
            return

        server_id = int(server_id_str)
        _bot.edit_message_text(messages.FETCHING_INBOUNDS, admin_id, prompt_id)
        
        # --- –æ—Å–Ω–æ–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å ---
        # –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è XuiAPIClient, –∏—Å–ø–æ–ª—å–∑—É–µ–º factory
        api_client = get_api_client(server_data)
        if not api_client:
            logger.error(f"Could not create API client for server {server_id}. Data: {server_data}")
            _bot.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ API-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.", admin_id, prompt_id, reply_markup=inline_keyboards.get_back_button("admin_server_management"))
            _clear_admin_state(admin_id)
            return

        panel_inbounds = api_client.list_inbounds()
        # --- –∫–æ–Ω–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ ---

        if not panel_inbounds:
            _bot.edit_message_text(messages.NO_INBOUNDS_FOUND_ON_PANEL, admin_id, prompt_id, reply_markup=inline_keyboards.get_back_button("admin_server_management"))
            _clear_admin_state(admin_id)
            return

        active_db_inbound_ids = [i['inbound_id'] for i in _db_manager.get_server_inbounds(server_id, only_active=True)]
        
        state_info['state'] = f'selecting_inbounds_for_{server_id}'
        state_info['data'] = {'panel_inbounds': panel_inbounds, 'selected_inbound_ids': active_db_inbound_ids}
        
        markup = inline_keyboards.get_inbound_selection_menu(server_id, panel_inbounds, active_db_inbound_ids)
        _bot.edit_message_text(messages.SELECT_INBOUNDS_TO_ACTIVATE.format(server_name=server_data['name']), admin_id, prompt_id, reply_markup=markup, parse_mode='Markdown')

    def save_inbound_changes(admin_id, message, server_id, selected_ids):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        server_data = _db_manager.get_server_by_id(server_id)
        panel_inbounds = _admin_states.get(admin_id, {}).get('data', {}).get('panel_inbounds', [])
        inbounds_to_save = [{'id': p_in['id'], 'remark': p_in.get('remark', '')} for p_in in panel_inbounds if p_in['id'] in selected_ids]
        
        msg = messages.INBOUND_CONFIG_SUCCESS if _db_manager.update_server_inbounds(server_id, inbounds_to_save) else messages.INBOUND_CONFIG_FAILED
        _bot.edit_message_text(msg.format(server_name=server_data['name']), admin_id, message.message_id, reply_markup=inline_keyboards.get_back_button("admin_server_management"))
            
        _clear_admin_state(admin_id)

    def handle_inbound_selection(admin_id, call):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –¥–ª—è —á—Ç–µ–Ω–∏—è callback_data."""
        data = call.data
        parts = data.split('_')
        action = parts[1]

        state_info = _admin_states.get(admin_id)
        if not state_info: return

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ server_id —Å–ø–æ—Å–æ–±–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
        server_id = int(parts[2]) if action == 'toggle' else int(parts[-1])
            
        if state_info.get('state') != f'selecting_inbounds_for_{server_id}': return

        selected_ids = state_info['data'].get('selected_inbound_ids', [])
        panel_inbounds = state_info['data'].get('panel_inbounds', [])

        if action == 'toggle':
            inbound_id_to_toggle = int(parts[3]) # ID –≤—Ö–æ–¥—è—â–µ–≥–æ –≤—Å–µ–≥–¥–∞ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            if inbound_id_to_toggle in selected_ids:
                selected_ids.remove(inbound_id_to_toggle)
            else:
                selected_ids.append(inbound_id_to_toggle)
        
        elif action == 'select' and parts[2] == 'all':
            panel_ids = {p['id'] for p in panel_inbounds}
            selected_ids.extend([pid for pid in panel_ids if pid not in selected_ids])
        
        elif action == 'deselect' and parts[2] == 'all':
            selected_ids.clear()
            
        elif action == 'save':
            save_inbound_changes(admin_id, call.message, server_id, selected_ids)
            return
        
        state_info['data']['selected_inbound_ids'] = list(set(selected_ids))
        markup = inline_keyboards.get_inbound_selection_menu(server_id, panel_inbounds, selected_ids)
        
        try:
            _bot.edit_message_reply_markup(chat_id=admin_id, message_id=call.message.message_id, reply_markup=markup)
        except telebot.apihelper.ApiTelegramException as e:
            if 'message is not modified' not in e.description:
                logger.warning(f"Error updating inbound selection keyboard: {e}")
                
                
    def create_backup(admin_id, message):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–∞ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ .env) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        _bot.edit_message_text("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...", admin_id, message.message_id)
        
        backup_filename = f"alamor_backup_{datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.zip"
        
        files_to_backup = [
            os.path.join(os.getcwd(), '.env'),
            _db_manager.db_path
        ]
        
        try:
            with zipfile.ZipFile(backup_filename, 'w') as zipf:
                for file_path in files_to_backup:
                    if os.path.exists(file_path):
                        zipf.write(file_path, os.path.basename(file_path))
                    else:
                        logger.warning(f"–§–∞–π–ª –¥–ª—è –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

            with open(backup_filename, 'rb') as backup_file:
                _bot.send_document(admin_id, backup_file, caption="‚úÖ –í–∞—à —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≥–æ—Ç–æ–≤.")
            
            _bot.delete_message(admin_id, message.message_id)
            _show_admin_main_menu(admin_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
            _bot.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.", admin_id, message.message_id)
        finally:
            # –£–¥–∞–ª–µ–Ω–∏–µ zip-—Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if os.path.exists(backup_filename):
                os.remove(backup_filename)
                
                
    def handle_gateway_type_selection(admin_id, message, gateway_type):
        state_info = _admin_states.get(admin_id)
        if not state_info: return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if state_info.get('state') == 'waiting_for_gateway_type':
            # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à–ª—é–∑–∞
            state_info['data']['gateway_type'] = gateway_type
            
            if gateway_type == 'zarinpal':
                state_info['state'] = 'waiting_for_merchant_id'
                _bot.edit_message_text(messages.ADD_GATEWAY_PROMPT_MERCHANT_ID, admin_id, message.message_id)
            elif gateway_type == 'card_to_card':
                state_info['state'] = 'waiting_for_card_number'
                _bot.edit_message_text(messages.ADD_GATEWAY_PROMPT_CARD_NUMBER, admin_id, message.message_id)
        
        elif state_info.get('state') == 'waiting_for_gateway_edit_type':
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–ª—é–∑–∞
            data = state_info['data']
            data['new_gateway_type'] = gateway_type
            
            if gateway_type == 'zarinpal':
                state_info['state'] = 'waiting_for_gateway_edit_merchant_id'
                _bot.edit_message_text(messages.ADD_GATEWAY_PROMPT_MERCHANT_ID, admin_id, message.message_id)
            elif gateway_type == 'card_to_card':
                state_info['state'] = 'waiting_for_gateway_edit_card_number'
                _bot.edit_message_text(messages.ADD_GATEWAY_PROMPT_CARD_NUMBER, admin_id, message.message_id)
            
            
            
            
    def start_delete_plan_flow(admin_id, message):
        _clear_admin_state(admin_id)
        prompt = _show_menu(admin_id, messages.DELETE_PLAN_PROMPT, inline_keyboards.get_back_button("admin_plan_management"), message)
        _admin_states[admin_id] = {'state': 'waiting_for_plan_id_to_delete', 'prompt_message_id': prompt.message_id}
        
    def process_delete_plan_id(admin_id, message):
        state_info = _admin_states[admin_id]
        if not message.text.isdigit() or not (plan := _db_manager.get_plan_by_id(int(message.text))):
            _bot.send_message(admin_id, messages.PLAN_NOT_FOUND); return

        plan_id = int(message.text)
        confirm_text = messages.DELETE_PLAN_CONFIRM.format(
            plan_name=helpers.escape_markdown_v1(plan['name']), 
            plan_id=plan_id
        )
        markup = inline_keyboards.get_confirmation_menu(f"confirm_delete_plan_{plan_id}", "admin_plan_management")
        _bot.edit_message_text(confirm_text, admin_id, state_info['prompt_message_id'], reply_markup=markup, parse_mode='Markdown')
        _clear_admin_state(admin_id) # State is cleared, waiting for callback

    def execute_delete_plan(admin_id, message, plan_id):
        plan = _db_manager.get_plan_by_id(plan_id)
        if plan and _db_manager.delete_plan(plan_id):
            _bot.edit_message_text(messages.PLAN_DELETED_SUCCESS.format(plan_name=plan['name']), admin_id, message.message_id)
        else:
            _bot.edit_message_text(messages.OPERATION_FAILED, admin_id, message.message_id)
        _show_plan_management_menu(admin_id)

    # --- EDIT PLAN ---
    def start_edit_plan_flow(admin_id, message):
        _clear_admin_state(admin_id)
        prompt = _show_menu(admin_id, messages.EDIT_PLAN_PROMPT_ID, inline_keyboards.get_back_button("admin_plan_management"), message)
        _admin_states[admin_id] = {'state': 'waiting_for_plan_id_to_edit', 'data': {}, 'prompt_message_id': prompt.message_id}

    def process_edit_plan_id(admin_id, message):
        state_info = _admin_states[admin_id]
        if not message.text.isdigit() or not (plan := _db_manager.get_plan_by_id(int(message.text))):
            _bot.send_message(admin_id, messages.PLAN_NOT_FOUND); return
        
        state_info['data']['plan_id'] = int(message.text)
        state_info['data']['original_plan'] = plan
        state_info['state'] = 'waiting_for_new_plan_name'
        _bot.edit_message_text(messages.EDIT_PLAN_NEW_NAME, admin_id, state_info['prompt_message_id'])

    def process_edit_plan_name(admin_id, message):
        state_info = _admin_states[admin_id]
        state_info['data']['new_name'] = message.text
        state_info['state'] = 'waiting_for_new_plan_price'
        _bot.edit_message_text(messages.EDIT_PLAN_NEW_PRICE, admin_id, state_info['prompt_message_id'])

    def process_edit_plan_price(admin_id, message):
        state_info = _admin_states[admin_id]
        if not helpers.is_float_or_int(message.text) or float(message.text) < 0:
            _bot.send_message(admin_id, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞."); return
        
        data = state_info['data']
        original_plan = data['original_plan']
        
        _db_manager.update_plan(
            plan_id=data['plan_id'],
            name=data['new_name'],
            price=float(message.text),
            volume_gb=original_plan['volume_gb'],
            duration_days=original_plan['duration_days']
        )
        _bot.edit_message_text(messages.EDIT_PLAN_SUCCESS.format(plan_name=data['new_name']), admin_id, state_info['prompt_message_id'])
        _clear_admin_state(admin_id)
        _show_plan_management_menu(admin_id)
        
        
    def start_search_user_flow(admin_id, message):
        """Starts the flow for searching a user by their Telegram ID."""
        _clear_admin_state(admin_id)
        prompt = _show_menu(admin_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏—Å–∫–æ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", inline_keyboards.get_back_button("admin_user_management"), message)
        _admin_states[admin_id] = {'state': 'waiting_for_user_id_to_search', 'prompt_message_id': prompt.message_id}

    def process_user_search(admin_id, message):
        """Processes the user ID from a message and shows their management panel."""
        state_info = _admin_states.get(admin_id, {})
        user_id_str = message.text.strip()

        if not user_id_str.isdigit():
            _bot.send_message(admin_id, "–í–≤–µ–¥–µ–Ω–Ω—ã–π ID –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return

        target_user_id = int(user_id_str)
        
        # –í–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–æ–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        _show_user_management_panel(admin_id, target_user_id, state_info['prompt_message_id'])
        
        _clear_admin_state(admin_id)
        
    def execute_delete_purchase(admin_id, message, purchase_id, user_telegram_id):
        """
        Deletes a purchase from the local database and the corresponding client
        from the X-UI panel.
        """
        # First, get purchase details to find the client UUID and server ID
        purchase = _db_manager.get_purchase_by_id(purchase_id)
        if not purchase:
            _bot.answer_callback_query(message.id, "–≠—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        # Step 1: Delete the purchase from the local database
        if not _db_manager.delete_purchase(purchase_id):
            _bot.answer_callback_query(message.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return

        # Step 2: Delete the client from the X-UI panel
        try:
            server = _db_manager.get_server_by_id(purchase['server_id'])
            if server and purchase['xui_client_uuid']:
                api_client = _xui_api(
                    panel_url=server['panel_url'],
                    username=server['username'],
                    password=server['password']
                )
                # We need the inbound_id to delete the client. This is a limitation.
                # A better approach for the future is to store inbound_id in the purchase record.
                # For now, we assume we need to iterate or have a default.
                # This part of the logic might need enhancement based on your X-UI panel version.
                # We will try to delete by UUID, which is supported by some panel forks.
                
                # Note: The default X-UI API requires inbound_id to delete a client.
                # If your panel supports deleting by UUID directly, this will work.
                # Otherwise, this part needs to be adapted.
                # For now, we log the action. A full implementation would require a proper API call.
                logger.info(f"Admin {admin_id} deleted purchase {purchase_id}. Corresponding X-UI client UUID to be deleted is {purchase['xui_client_uuid']} on server {server['name']}.")
                # api_client.delete_client(inbound_id, purchase['xui_client_uuid']) # This line would be needed
        except Exception as e:
            logger.error(f"Could not delete client from X-UI for purchase {purchase_id}: {e}")
            _bot.answer_callback_query(message.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

        _bot.answer_callback_query(message.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {purchase_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

        # Step 3: Refresh the user's subscription list for the admin
        # We create a mock message object to pass to the search function
        mock_message = types.Message(
            message_id=message.message_id,
            chat=message.chat,
            date=None,
            content_type='text',
            options={},
            json_string=""
        )
        mock_message.text = str(user_telegram_id)
        
        # Put the admin back into the search state to show the updated list
        _admin_states[admin_id] = {'state': 'waiting_for_user_id_to_search', 'prompt_message_id': message.message_id}
        process_user_search(admin_id, mock_message)



    def show_channel_lock_menu(admin_id, message):
        """Displays the channel lock management menu."""
        channel_id = _db_manager.get_setting('required_channel_id')
        status = f"–ê–∫—Ç–∏–≤–Ω–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ `{channel_id}`" if channel_id else "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
        text = messages.CHANNEL_LOCK_MENU_TEXT.format(status=status)
        markup = inline_keyboards.get_channel_lock_management_menu(channel_set=bool(channel_id))
        _show_menu(admin_id, text, markup, message)

    def start_set_channel_lock_flow(admin_id, message):
        _clear_admin_state(admin_id)
        prompt = _show_menu(admin_id, messages.CHANNEL_LOCK_SET_PROMPT, inline_keyboards.get_back_button("admin_channel_lock_management"), message)
        _admin_states[admin_id] = {'state': 'waiting_for_channel_id', 'prompt_message_id': prompt.message_id}

    def process_set_channel_id(admin_id, message):
        state_info = _admin_states.get(admin_id, {})
        channel_id_str = message.text.strip()
        # ... (code for cancel and validation remains the same)

        if not (channel_id_str.startswith('-') and channel_id_str[1:].isdigit()):
            _bot.send_message(admin_id, messages.CHANNEL_LOCK_INVALID_ID)
            return

        # Save the ID in the state and ask for the link
        state_info['data'] = {'channel_id': channel_id_str}
        state_info['state'] = 'waiting_for_channel_link' # <-- Move to next state
        
        _bot.edit_message_text(
            "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/Alamor_Network):",
            admin_id,
            state_info['prompt_message_id']
        )

    def process_set_channel_link(admin_id, message):
        """ --- NEW FUNCTION --- """
        state_info = _admin_states.get(admin_id, {})
        channel_link = message.text.strip()
        
        if not channel_link.lower().startswith(('http://', 'https://')):
            _bot.send_message(admin_id, "–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É.")
            return
            
        channel_id = state_info['data']['channel_id']

        # Now, save both ID and Link to the database
        _db_manager.update_setting('required_channel_id', channel_id)
        _db_manager.update_setting('required_channel_link', channel_link)
        
        _bot.edit_message_text(messages.CHANNEL_LOCK_SUCCESS.format(channel_id=channel_id), admin_id, state_info['prompt_message_id'])
        _clear_admin_state(admin_id)
        show_channel_lock_menu(admin_id) # Show the updated menu
    def execute_remove_channel_lock(admin_id, message):
        _db_manager.update_setting('required_channel_id', '') # Set to empty string
        _db_manager.update_setting('required_channel_link', '')
        _bot.answer_callback_query(message.id, messages.CHANNEL_LOCK_REMOVED)
        show_channel_lock_menu(admin_id, message)
        
    def show_tutorial_management_menu(admin_id, message):
        """Displays the main menu for tutorial management."""
        _show_menu(admin_id, "üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º", inline_keyboards.get_tutorial_management_menu(), message)

    def list_tutorials(admin_id, message):
        """Lists all saved tutorials with delete buttons."""
        all_tutorials = _db_manager.get_all_tutorials()
        markup = inline_keyboards.get_tutorials_list_menu(all_tutorials)
        _show_menu(admin_id, "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ:", markup, message)

    def execute_delete_tutorial(admin_id, message, tutorial_id):
        """Deletes a tutorial and refreshes the list."""
        if _db_manager.delete_tutorial(tutorial_id):
            _bot.answer_callback_query(message.id, "‚úÖ –û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
            list_tutorials(admin_id, message) # Refresh the list
        else:
            _bot.answer_callback_query(message.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è.", show_alert=True)

    def start_add_tutorial_flow(admin_id, message):
        """Starts the multi-step process for adding a new tutorial."""
        _clear_admin_state(admin_id)
        prompt = _show_menu(admin_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: Android, Windows, iPhone):", inline_keyboards.get_back_button("admin_tutorial_management"), message)
        _admin_states[admin_id] = {'state': 'waiting_for_tutorial_platform', 'data': {}, 'prompt_message_id': prompt.message_id}

    def process_tutorial_platform(admin_id, message):
        state_info = _admin_states[admin_id]
        state_info['data']['platform'] = message.text.strip()
        state_info['state'] = 'waiting_for_tutorial_app_name'
        _bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: V2RayNG):", admin_id, state_info['prompt_message_id'])

    def process_tutorial_app_name(admin_id, message):
        state_info = _admin_states[admin_id]
        state_info['data']['app_name'] = message.text.strip()
        state_info['state'] = 'waiting_for_tutorial_forward'
        _bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ø–æ—Å—Ç —Å –æ–±—É—á–µ–Ω–∏–µ–º –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.", admin_id, state_info['prompt_message_id'])

    def process_tutorial_forward(admin_id, message):
        state_info = _admin_states.get(admin_id, {})
        # Check if the message is forwarded
        if not message.forward_from_chat:
            _bot.send_message(admin_id, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç.")
            return

        data = state_info['data']
        platform = data['platform']
        app_name = data['app_name']
        forward_chat_id = message.forward_from_chat.id
        forward_message_id = message.forward_from_message_id

        if _db_manager.add_tutorial(platform, app_name, forward_chat_id, forward_message_id):
            _bot.edit_message_text("‚úÖ –û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.", admin_id, state_info['prompt_message_id'])
        else:
            _bot.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è.", admin_id, state_info['prompt_message_id'])
        
        _clear_admin_state(admin_id)
        show_tutorial_management_menu(admin_id)
        
        
    def show_support_management_menu(admin_id, message):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ Markdown.
        (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        """
        support_link = _db_manager.get_setting('support_link') or "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        
        # --- –æ—Å–Ω–æ–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å ---
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
        escaped_link = helpers.escape_markdown_v1(support_link)
        
        text = messages.SUPPORT_MANAGEMENT_MENU_TEXT.format(link=escaped_link)
        markup = inline_keyboards.get_support_management_menu()
        
        # –¢–µ–ø–µ—Ä—å _show_menu –º–æ–∂–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown
        _show_menu(admin_id, text, markup, message, parse_mode='Markdown')

    def set_support_type(admin_id, call, support_type):
        """Sets the support type (admin chat or link)."""
        _db_manager.update_setting('support_type', support_type)
        
        # --- THE FIX IS HERE ---
        # Use call.id to answer the query, and call.message to edit the message
        _bot.answer_callback_query(call.id, messages.SUPPORT_TYPE_SET_SUCCESS)
        show_support_management_menu(admin_id, call.message)

    def start_edit_support_link_flow(admin_id, message):
        """Starts the process for setting/editing the support link."""
        _clear_admin_state(admin_id)
        prompt = _show_menu(admin_id, messages.SET_SUPPORT_LINK_PROMPT, inline_keyboards.get_back_button("admin_support_management"), message)
        _admin_states[admin_id] = {'state': 'waiting_for_support_link', 'prompt_message_id': prompt.message_id}
    def process_support_link(admin_id, message):
        """Saves the support link and updates the menu directly. (Final Version)"""
        state_info = _admin_states.get(admin_id, {})
        support_link = message.text.strip()
        prompt_message_id = state_info.get('prompt_message_id')

        if not support_link.lower().startswith(('http://', 'https://', 't.me/')):
            _bot.send_message(admin_id, "–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É.")
            return
            
        # Save the new link to the database
        _db_manager.update_setting('support_link', support_link)

        # --- –æ—Å–Ω–æ–≤–Ω–æ–µ –∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ---
        # Get the text and keyboard for the updated menu
        new_support_link_text = _db_manager.get_setting('support_link') or "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        menu_text = messages.SUPPORT_MANAGEMENT_MENU_TEXT.format(link=new_support_link_text)
        menu_markup = inline_keyboards.get_support_management_menu()

        # Directly edit the original prompt message to show the new menu
        try:
            if prompt_message_id:
                _bot.edit_message_text(
                    text=menu_text,
                    chat_id=admin_id,
                    message_id=prompt_message_id,
                    reply_markup=menu_markup,
                    parse_mode=None  # Use plain text to be safe
                )
        except Exception as e:
            logger.error(f"Failed to edit message into support menu: {e}")
            # If editing fails for any reason, send a new message with the menu
            _bot.send_message(admin_id, menu_text, reply_markup=menu_markup, parse_mode=None)

        # Clean up the admin state
        _clear_admin_state(admin_id)
        
    
        
    def execute_save_inbounds(admin_id, message, server_id):
        state_info = _admin_states.get(admin_id, {})
        if not state_info or state_info.get('state') != f'selecting_inbounds_for_{server_id}': return

        selected_ids = state_info['data'].get('selected_inbound_ids', [])
        panel_inbounds = state_info['data'].get('panel_inbounds', [])
        inbounds_to_save = [{'id': p_in['id'], 'remark': p_in.get('remark', '')} for p_in in panel_inbounds if p_in['id'] in selected_ids]
        
        server_data = _db_manager.get_server_by_id(server_id)
        if _db_manager.update_server_inbounds(server_id, inbounds_to_save):
            _bot.edit_message_text(messages.INBOUND_CONFIG_SUCCESS.format(server_name=server_data['name']), admin_id, message.message_id, reply_markup=inline_keyboards.get_back_button("admin_server_management"))
        else:
            _bot.edit_message_text(messages.INBOUND_CONFIG_FAILED.format(server_name=server_data['name']), admin_id, message.message_id)
        _clear_admin_state(admin_id)

    @_bot.callback_query_handler(func=lambda call: helpers.is_admin(call.from_user.id) and call.data.startswith('panel_type_'))
    def handle_panel_type_selection(call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ç–∏–ø –ø–∞–Ω–µ–ª–∏."""
        admin_id = call.from_user.id
        panel_type = call.data.replace("panel_type_", "")
        
        server_data = {'panel_type': panel_type}
        
        prompt = _bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞:", admin_id, call.message.message_id)
        _bot.register_next_step_handler(prompt, process_add_server_name, server_data)

    def process_add_server_name(message, server_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–∞–Ω–µ–ª–∏."""
        admin_id = message.from_user.id
        server_data['name'] = message.text.strip()
        
        prompt = _bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –ø–∞–Ω–µ–ª–∏ (–ø—Ä–∏–º–µ—Ä: http://1.2.3.4:54321):")
        _bot.register_next_step_handler(prompt, process_add_server_url, server_data)

    def process_add_server_url(message, server_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–∞–Ω–µ–ª–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        admin_id = message.from_user.id
        server_data['panel_url'] = message.text.strip()
        
        # –î–ª—è hiddify, –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º UUID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞–Ω–µ–ª–∏:"
        if server_data['panel_type'] == 'hiddify':
            prompt_text = "–í–≤–µ–¥–∏—Ç–µ UUID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–∞–Ω–µ–ª–∏ Hiddify:"
            
        prompt = _bot.send_message(admin_id, prompt_text)
        _bot.register_next_step_handler(prompt, process_add_server_username, server_data)

    def process_add_server_username(message, server_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å."""
        admin_id = message.from_user.id
        server_data['username'] = message.text.strip()
        
        # –î–ª—è hiddify –ø–∞—Ä–æ–ª—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if server_data['panel_type'] == 'hiddify':
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ —ç—Ç–∞–ø—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            execute_add_server(admin_id, server_data)
            return

        prompt = _bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–∞–Ω–µ–ª–∏:")
        _bot.register_next_step_handler(prompt, process_add_server_password, server_data)

    def process_add_server_password(message, server_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–æ–¥–ø–∏—Å–∫–∏."""
        admin_id = message.from_user.id
        server_data['password'] = message.text.strip()
        
        prompt = _bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–∏–º–µ—Ä: https://yourdomain.com:2096):")
        _bot.register_next_step_handler(prompt, process_add_server_sub_base_url, server_data)

    def process_add_server_sub_base_url(message, server_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –ø—É—Ç–∏."""
        admin_id = message.from_user.id
        server_data['sub_base_url'] = message.text.strip()

        prompt = _bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å –ø—É—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–∏–º–µ—Ä: sub):")
        _bot.register_next_step_handler(prompt, process_add_server_sub_path, server_data)

    def process_add_server_sub_path(message, server_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –ø—É—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Ä–≤–µ—Ä."""
        admin_id = message.from_user.id
        server_data['sub_path_prefix'] = message.text.strip()
        execute_add_server(admin_id, server_data)

    def execute_add_server(admin_id, server_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        # –î–ª—è hiddify —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        password = server_data.get('password', '')
        sub_base_url = server_data.get('sub_base_url', '')
        sub_path_prefix = server_data.get('sub_path_prefix', '')

        new_server_id = _db_manager.add_server(
            name=server_data['name'],
            panel_type=server_data['panel_type'],
            panel_url=server_data['panel_url'],
            username=server_data['username'],
            password=password,
            sub_base_url=sub_base_url,
            sub_path_prefix=sub_path_prefix
        )

        if new_server_id:
            _bot.send_message(admin_id, f"‚úÖ –°–µ—Ä–≤–µ—Ä '{server_data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            _bot.send_message(admin_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")
            
            
            
            
    def start_add_profile_flow(admin_id, message):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."""
        _clear_admin_state(admin_id)
        prompt = _show_menu(admin_id, messages.ADD_PROFILE_PROMPT_NAME, inline_keyboards.get_back_button("admin_profile_management"), message)
        _admin_states[admin_id] = {'state': 'waiting_for_profile_name', 'data': {}, 'prompt_message_id': prompt.message_id}

    # ... (–≤ —Ä–∞–∑–¥–µ–ª–µ Final Execution Functions)

    def execute_add_profile(admin_id, data):
        _clear_admin_state(admin_id)
        profile_id = _db_manager.add_profile(
            name=data['name'],
            per_gb_price=data['per_gb_price'],
            duration_days=data['duration_days'],
            description=data['description']
        )
        if profile_id:
            msg = messages.ADD_PROFILE_SUCCESS.format(profile_name=data['name'])
        elif profile_id is None:
            msg = messages.ADD_PROFILE_DUPLICATE_ERROR.format(profile_name=data['name'])
        else:
            msg = messages.ADD_PROFILE_GENERAL_ERROR
        _bot.send_message(admin_id, msg)
        _show_profile_management_menu(admin_id)

            
        
    def list_all_profiles(admin_id, message):
        profiles = _db_manager.get_all_profiles()
        if not profiles:
            text = "–ü–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
        else:
            text = "üìÑ **–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π:**\n\n"
            for p in profiles:
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if p['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                description = p['description'] or "–Ω–µ—Ç"
                details = (
                    f"**ID: `{p['id']}` - {helpers.escape_markdown_v1(p['name'])}**\n"
                    f"‚ñ´Ô∏è –¶–µ–Ω–∞ –∑–∞ –≥–∏–≥–∞–±–∞–π—Ç: `{p['per_gb_price']:,.0f}` —Ç—É–º–∞–Ω–æ–≤\n"
                    f"‚ñ´Ô∏è –°—Ä–æ–∫: `{p['duration_days']}` –¥–Ω–µ–π\n"
                    f"‚ñ´Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ: {helpers.escape_markdown_v1(description)}\n"
                    f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å: {status}\n"
                    "-----------------------------------\n"
                )
                text += details
        _show_menu(admin_id, text, inline_keyboards.get_back_button("admin_profile_management"), message)

    def start_manage_profile_inbounds_flow(admin_id, message):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π."""
        profiles = _db_manager.get_all_profiles()
        if not profiles:
            _bot.answer_callback_query(message.id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å.", show_alert=True)
            return
            
        markup = inline_keyboards.get_profile_selection_menu(profiles)
        _show_menu(admin_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –≤—Ö–æ–¥—è—â–∏–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å:", markup, message)

    
    def handle_profile_selection(admin_id, message, profile_id):
        """
        –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.
        """
        _clear_admin_state(admin_id)
        servers = _db_manager.get_all_servers(only_active=False)
        if not servers:
            _bot.answer_callback_query(message.id, "–°–µ—Ä–≤–µ—Ä—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä.", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
        _admin_states[admin_id] = {'state': 'selecting_server_for_profile', 'data': {'profile_id': profile_id}}
        
        markup = inline_keyboards.get_server_selection_menu_for_profile(servers, profile_id)
        _show_menu(admin_id, "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", markup, message)
        
        
        
        
        
    def handle_server_selection_for_profile(admin_id, message, profile_id, server_id):
        """
        –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø–∞–Ω–µ–ª–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –≤–∏–¥–µ —á–µ–∫-–ª–∏—Å—Ç–∞.
        """
        _bot.edit_message_text(messages.FETCHING_INBOUNDS, admin_id, message.message_id)
        
        server_data = _db_manager.get_server_by_id(server_id)
        if not server_data:
            _bot.answer_callback_query(message.id, "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return

        api_client = get_api_client(server_data)
        if not api_client or not api_client.check_login():
            _bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.", admin_id, message.message_id, reply_markup=inline_keyboards.get_back_button(f"admin_select_profile_{profile_id}")); return

        panel_inbounds = api_client.list_inbounds()
        if not panel_inbounds:
            _bot.edit_message_text(messages.NO_INBOUNDS_FOUND_ON_PANEL, admin_id, message.message_id, reply_markup=inline_keyboards.get_back_button(f"admin_select_profile_{profile_id}")); return
            
        # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –≤—Ö–æ–¥—è—â–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        selected_inbound_ids = _db_manager.get_inbounds_for_profile(profile_id, server_id=server_id)
        
        _admin_states[admin_id] = {
            'state': 'selecting_inbounds_for_profile',
            'data': {
                'profile_id': profile_id,
                'server_id': server_id,
                'panel_inbounds': panel_inbounds,
                'selected_inbound_ids': selected_inbound_ids
            }
        }
        
        markup = inline_keyboards.get_inbound_selection_menu_for_profile(profile_id, server_id, panel_inbounds, selected_inbound_ids)
        profile = _db_manager.get_profile_by_id(profile_id)
        _show_menu(admin_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ö–æ–¥—è—â–∏–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è '{profile['name']}' —Å —Å–µ—Ä–≤–µ—Ä–∞ '{server_data['name']}':", markup, message)
    def handle_profile_inbound_toggle(admin_id, message, profile_id, server_id, inbound_id):
        """–£–ø—Ä–∞–≤–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏–ª–∏ —Å–Ω—è—Ç–∏–µ–º –æ—Ç–º–µ—Ç–∫–∏ —Å –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —á–µ–∫-–ª–∏—Å—Ç–µ."""
        state_info = _admin_states.get(admin_id)
        if not state_info or state_info.get('state') != 'selecting_inbounds_for_profile': return
        
        data = state_info['data']
        if data['profile_id'] != profile_id or data['server_id'] != server_id: return

        selected_ids = data['selected_inbound_ids']
        if inbound_id in selected_ids:
            selected_ids.remove(inbound_id)
        else:
            selected_ids.append(inbound_id)
            
        markup = inline_keyboards.get_inbound_selection_menu_for_profile(
            profile_id, server_id, data['panel_inbounds'], selected_ids
        )
        try:
            _bot.edit_message_reply_markup(chat_id=admin_id, message_id=message.message_id, reply_markup=markup)
        except telebot.apihelper.ApiTelegramException as e:
            if 'message is not modified' not in str(e):
                logger.warning(f"Error updating profile inbound checklist: {e}")

    def execute_save_profile_inbounds(admin_id, message, profile_id, server_id):
        state_info = _admin_states.get(admin_id)
        if not state_info or state_info.get('state') != 'selecting_inbounds_for_profile': return

        try:
            _bot.answer_callback_query(message.id, "‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        except Exception: pass

        selected_ids = state_info['data']['selected_inbound_ids']
        
        # --- –Ω–æ–≤—ã–π –∏ –≤–∞–∂–Ω—ã–π –ª–æ–≥ ---
        logger.info(f"ADMIN DEBUG: Saving to DB for profile_id={profile_id}, server_id={server_id}. Selected inbound_ids: {selected_ids}")
        
        if _db_manager.update_inbounds_for_profile(profile_id, server_id, selected_ids):
            pass # —É—Å–ø–µ—à–Ω–æ
        else:
            _bot.send_message(admin_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

        _clear_admin_state(admin_id)
        _show_profile_management_menu(admin_id, message)
    def start_sync_configs_flow(admin_id, message):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ–ª—É—á–∞—è –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏. (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        """
        try:
            _bot.edit_message_text("‚è≥ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏... –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", admin_id, message.message_id)
        except Exception:
            pass

        servers = _db_manager.get_all_servers(only_active=False)
        if not servers:
            _bot.send_message(admin_id, "–°–µ—Ä–≤–µ—Ä—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            _show_admin_main_menu(admin_id)
            return

        report = "üìä **–û—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:**\n\n"
        total_synced = 0
        
        for server in servers:
            server_name = server['name']
            panel_type = server['panel_type']
            
            api_client = get_api_client(server)
            if not api_client or not api_client.check_login():
                report += f"‚ùå **{helpers.escape_markdown_v1(server_name)}**: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.\n"
                continue
                
            # 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
            panel_inbounds_summary = api_client.list_inbounds()
            if not panel_inbounds_summary:
                report += f"‚ö†Ô∏è **{helpers.escape_markdown_v1(server_name)}**: –í—Ö–æ–¥—è—â–∏–µ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                continue

            # 2. –¢–µ–ø–µ—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            full_inbounds_details = []
            for inbound_summary in panel_inbounds_summary:
                inbound_id = inbound_summary.get('id')
                if not inbound_id:
                    continue
                
                # –í—ã–∑–æ–≤ get_inbound –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                detailed_inbound = api_client.get_inbound(inbound_id)
                if detailed_inbound:
                    full_inbounds_details.append(detailed_inbound)
                else:
                    logger.warning(f"Could not fetch details for inbound {inbound_id} on server {server_name}")

            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            normalized_configs = normalize_panel_inbounds(panel_type, full_inbounds_details)
            sync_result = _db_manager.sync_configs_for_server(server['id'], normalized_configs)
            
            if sync_result > 0:
                report += f"‚úÖ **{helpers.escape_markdown_v1(server_name)}**: {sync_result} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.\n"
                total_synced += sync_result
            elif sync_result == 0:
                report += f"‚ö†Ô∏è **{helpers.escape_markdown_v1(server_name)}**: –ü–æ–ª–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
            else:
                report += f"‚ùå **{helpers.escape_markdown_v1(server_name)}**: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n"

        report += f"\n---\n**–ò—Ç–æ–≥–æ:** {total_synced} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        _bot.send_message(admin_id, report, parse_mode='Markdown')
        _show_admin_main_menu(admin_id)
        
        
    
    def process_delete_server_id(admin_id, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º."""
        state_info = _admin_states.get(admin_id, {})
        prompt_id = state_info.get("prompt_message_id")
        server_id_str = message.text.strip()

        if not server_id_str.isdigit() or not (server := _db_manager.get_server_by_id(int(server_id_str))):
            _bot.edit_message_text(f"{messages.SERVER_NOT_FOUND}\n\n{messages.DELETE_SERVER_PROMPT}", admin_id, prompt_id)
            return
            
        server_id = int(server_id_str)
        confirm_text = messages.DELETE_SERVER_CONFIRM.format(server_name=server['name'], server_id=server_id)
        markup = inline_keyboards.get_confirmation_menu(f"confirm_delete_server_{server_id}", "admin_server_management")
        _bot.edit_message_text(confirm_text, admin_id, prompt_id, reply_markup=markup, parse_mode='Markdown')
        _clear_admin_state(admin_id)
        
        
    
    def _show_admin_management_menu(admin_id, message):
        admins = _db_manager.get_all_admins()
        admin_list = "\n".join([f"- `{admin['telegram_id']}` ({admin['first_name']})" for admin in admins])
        text = f"üîë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏**\n\n**–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**\n{admin_list}"
        _show_menu(admin_id, text, inline_keyboards.get_admin_management_menu(), message)

    def start_add_admin_flow(admin_id, message):
        _clear_admin_state(admin_id)
        prompt = _show_menu(admin_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:", inline_keyboards.get_back_button("admin_manage_admins"), message)
        _admin_states[admin_id] = {'state': 'waiting_for_admin_id_to_add', 'prompt_message_id': prompt.message_id}

    def start_remove_admin_flow(admin_id, message):
        _clear_admin_state(admin_id)
        prompt = _show_menu(admin_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:", inline_keyboards.get_back_button("admin_manage_admins"), message)
        _admin_states[admin_id] = {'state': 'waiting_for_admin_id_to_remove', 'prompt_message_id': prompt.message_id}
        
        
        
    def check_nginx_status(admin_id, message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Nginx –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        _bot.edit_message_text("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ Nginx... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", admin_id, message.message_id)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã status
        status_success, status_output = run_shell_command(['systemctl', 'status', 'nginx.service'])
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_success, config_output = run_shell_command(['nginx', '-t'])
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        report = "üìä **–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Nginx**\n\n"
        report += "--- **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª—É–∂–±—ã (`systemctl status`)** ---\n"
        report += f"```\n{status_output}\n```\n\n"
        report += "--- **–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (`nginx -t`)** ---\n"
        report += f"```\n{config_output}\n```\n\n"
        
        if status_success and config_success:
            report += "‚úÖ –ü–æ—Ö–æ–∂–µ, —Å–ª—É–∂–±–∞ Nginx –∞–∫—Ç–∏–≤–Ω–∞ –∏ –µ–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑ –ø—Ä–æ–±–ª–µ–º."
        else:
            report += "‚ùå –í —Å–ª—É–∂–±–µ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥—ã –≤—ã—à–µ."
            
        _bot.send_message(admin_id, report, parse_mode='Markdown')
        _show_admin_main_menu(admin_id) # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–Ω–æ–≤–∞
        
        
    def run_system_health_check(admin_id, message):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã."""
        msg = _bot.edit_message_text("ü©∫ **–ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ.", admin_id, message.message_id, parse_mode='Markdown')
        
        report_parts = ["üìä **–û—Ç—á–µ—Ç –æ –ø–æ–ª–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã**\n"]
        errors_found = False

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–±
        report_parts.append("\n--- **€±. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª—É–∂–±** ---")
        services_to_check = ['alamorbot.service', 'alamor_webhook.service', 'nginx.service']
        for service in services_to_check:
            is_active, _ = run_shell_command(['systemctl', 'is-active', service])
            if is_active:
                report_parts.append(f"‚úÖ –°–ª—É–∂–±–∞ `{service}`: **–ê–∫—Ç–∏–≤–Ω–∞**")
            else:
                errors_found = True
                report_parts.append(f"‚ùå –°–ª—É–∂–±–∞ `{service}`: **–ù–µ–∞–∫—Ç–∏–≤–Ω–∞**")
                report_parts.append(f"   - –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞...")
                start_success, start_output = run_shell_command(['systemctl', 'start', service])
                if start_success:
                    report_parts.append("   - ‚úÖ –°–ª—É–∂–±–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
                else:
                    report_parts.append(f"   - ‚ùå –ó–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è.")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        report_parts.append("\n--- **€≤. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö** ---")
        if _db_manager.check_connection():
            report_parts.append("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL: **–£—Å–ø–µ—à–Ω–æ**")
        else:
            errors_found = True
            report_parts.append("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL: **–ù–µ—É–¥–∞—á–Ω–æ**\n   - –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ `DB_` –≤ —Ñ–∞–π–ª–µ `.env`.")

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞–Ω–µ–ª—è–º X-UI
        report_parts.append("\n--- **€≥. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª—è–º X-UI** ---")
        servers = _db_manager.get_all_servers(only_active=False)
        if not servers:
            report_parts.append("‚ö†Ô∏è –í –±–æ—Ç–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.")
        else:
            for server in servers:
                api_client = get_api_client(server)
                if api_client and api_client.check_login():
                    report_parts.append(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É '{helpers.escape_markdown_v1(server['name'])}': **–£—Å–ø–µ—à–Ω–æ**")
                else:
                    errors_found = True
                    report_parts.append(f"‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É '{helpers.escape_markdown_v1(server['name'])}': **–ù–µ—É–¥–∞—á–Ω–æ**")

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        report_parts.append("\n--- **€¥. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–¥–∞–∂** ---")
        if not _db_manager.get_active_subscription_domain():
            errors_found = True
            report_parts.append("‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:** –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–º–µ–Ω –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.")
        if not _db_manager.get_all_plans(only_active=True):
            errors_found = True
            report_parts.append("‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:** –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏.")
        if not _db_manager.get_all_payment_gateways(only_active=True):
            errors_found = True
            report_parts.append("‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:** –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —à–ª—é–∑–æ–≤. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø–ª–∞—Ç–∏—Ç—å.")
        
        if not errors_found:
            report_parts.append("\n‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —á–∞—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        else:
            report_parts.append("\n‚ùå **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç –≤—ã—à–µ.")
            
        final_report = "\n".join(report_parts)
        _bot.edit_message_text(final_report, admin_id, msg.message_id, parse_mode='Markdown', reply_markup=inline_keyboards.get_back_button("admin_main_menu"))
        
        
        
        
    def start_sample_config_flow(admin_id, message, target_inbounds, context):
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
        """
        if not target_inbounds:
            _bot.send_message(admin_id, "‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            _clear_admin_state(admin_id)
            
            # --- –æ—Å–Ω–æ–≤–Ω–æ–µ –∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å ---
            # –¢–µ–ø–µ—Ä—å –±–æ—Ç –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
            if context.get('type') == 'profile':
                # –í–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
                show_profile_template_management_menu(admin_id, message)
            else:
                # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
                show_template_management_menu(admin_id, message)
            return

        current_inbound = target_inbounds[0]
        remaining_inbounds = target_inbounds[1:]

        _admin_states[admin_id] = {
            'state': 'waiting_for_sample_config',
            'data': {
                'current_inbound': current_inbound,
                'remaining_inbounds': remaining_inbounds,
                'context': context
            }
        }
        
        inbound_remark = current_inbound.get('remark', f"ID: {current_inbound.get('id')}")
        
        prompt_text = (
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **–ø—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é** –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n\n"
            f"‚ñ´Ô∏è **–°–µ—Ä–≤–µ—Ä:** {context['server_name']}\n"
            f"‚ñ´Ô∏è **–í—Ö–æ–¥—è—â–µ–µ:** {inbound_remark}"
        )
        
        prompt = _show_menu(admin_id, prompt_text, None, message)
        _admin_states[admin_id]['prompt_message_id'] = prompt.message_id
    def process_sample_config_input(admin_id, message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç–∞–∫ –∏ —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        """
        state_info = _admin_states.get(admin_id)
        if not state_info or state_info.get('state') != 'waiting_for_sample_config':
            return

        raw_template_link = message.text.strip()
        parsed_params = parse_config_link(raw_template_link)

        if not parsed_params:
            _bot.send_message(admin_id, "‚ùå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É VLESS –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")
            return
        
        inbound_info = state_info['data']['current_inbound']
        context = state_info['data']['context']
        params_json = json.dumps(parsed_params)

        success = False
        if context['type'] == 'profile':
            success = _db_manager.update_profile_inbound_template(context['profile_id'], context['server_id'], inbound_info['id'], params_json, raw_template_link)
        else:
            success = _db_manager.update_server_inbound_template(context['server_id'], inbound_info['id'], params_json, raw_template_link)

        if success:
            _bot.edit_message_text("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å—ã—Ä–æ–π —à–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", admin_id, state_info['prompt_message_id'])
        else:
            _bot.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", admin_id, state_info['prompt_message_id'])

        start_sample_config_flow(admin_id, message, state_info['data']['remaining_inbounds'], context)
    def show_template_management_menu(admin_id, message):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."""
        all_inbounds = _db_manager.get_all_active_inbounds_with_server_info()
        markup = inline_keyboards.get_template_management_menu(all_inbounds)
        _show_menu(admin_id, "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ:", markup, message)




    def show_profile_template_management_menu(admin_id, message):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π."""
        # –ù–∞–º –Ω—É–∂–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ db_manager –¥–ª—è —á—Ç–µ–Ω–∏—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        all_profile_inbounds = _db_manager.get_all_profile_inbounds_with_status()
        # –ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        markup = inline_keyboards.get_profile_template_management_menu(all_profile_inbounds)
        _show_menu(admin_id, "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ:", markup, message)
        
        
    def show_profile_inbounds_db_status(admin_id, message):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã profile_inbounds –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
        records = _db_manager.get_all_profile_inbounds_for_debug()
        
        if not records:
            text = "–¢–∞–±–ª–∏—Ü–∞ `profile_inbounds` –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø—É—Å—Ç–∞."
        else:
            text = "üìÑ **–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã `profile_inbounds`:**\n\n"
            for rec in records:
                text += (
                    f"‚ñ´Ô∏è **–ü—Ä–æ—Ñ–∏–ª—å:** `{rec['profile_id']}` ({rec['profile_name']})\n"
                    f"‚ñ´Ô∏è **–°–µ—Ä–≤–µ—Ä:** `{rec['server_id']}` ({rec['server_name']})\n"
                    f"‚ñ´Ô∏è **–í—Ö–æ–¥—è—â–µ–µ:** `{rec['inbound_id']}`\n"
                    "--------------------\n"
                )
                
        _show_menu(admin_id, text, inline_keyboards.get_back_button("admin_profile_management"), message)

   
    def show_branding_settings_menu(admin_id, message):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞."""
        brand_name = _db_manager.get_setting('brand_name') or "Alamor" # –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        text = (
            f"üé® **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞**\n\n"
            f"–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞: **{brand_name}**\n\n"
            f"–≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞—Ö –∏ –≤ remark –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞", callback_data="admin_change_brand_name"))
        markup.add(inline_keyboards.get_back_button("admin_main_menu").keyboard[0][0])
        _show_menu(admin_id, text, markup, message, parse_mode='Markdown')

    def start_change_brand_name_flow(admin_id, message):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞."""
        _clear_admin_state(admin_id)
        prompt = _show_menu(admin_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (—Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):", inline_keyboards.get_back_button("admin_branding_settings"), message)
        _admin_states[admin_id] = {'state': 'waiting_for_brand_name', 'prompt_message_id': prompt.message_id}
        
        
    def show_message_management_menu(admin_id, message, page=1):
        all_messages = _db_manager.get_all_bot_messages()
        items_per_page = 10
        total_pages = (len(all_messages) + items_per_page - 1) // items_per_page
        messages_on_page = all_messages[(page - 1) * items_per_page:page * items_per_page]
        
        markup = inline_keyboards.get_message_management_menu(messages_on_page, page, total_pages)
        text = "‚úçÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏**\n\n–ß—Ç–æ–±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ:"
        _show_menu(admin_id, text, markup, message, parse_mode='Markdown')

    def start_edit_message_flow(admin_id, message, message_key):
        current_text = _db_manager.get_message_by_key(message_key)
        if current_text is None:
            _bot.answer_callback_query(message.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        prompt_text = (
            f"‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: `{message_key}`\n\n**–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n`{current_text}`\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç. (–î–ª—è –æ—Ç–º–µ–Ω—ã: `cancel`)"
        )
        prompt = _show_menu(admin_id, prompt_text, inline_keyboards.get_back_button("admin_message_management"), message, parse_mode='Markdown')
        _admin_states[admin_id] = {
            'state': 'waiting_for_new_message_text',
            'data': {'message_key': message_key},
            'prompt_message_id': prompt.message_id
        }
    def _show_user_management_panel(admin_id, target_user_id, message_id_to_edit):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è."""
        user_info = _db_manager.get_user_by_telegram_id(target_user_id)
        if not user_info:
            _bot.edit_message_text(messages.USER_NOT_FOUND, admin_id, message_id_to_edit)
            return

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        role_map = {'admin': 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'reseller': 'ü§ù –†–µ—Å–µ–ª–ª–µ—Ä', 'user': 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
        user_role_key = user_info.get('role', 'user')
        role = role_map.get(user_role_key, 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        balance = f"{user_info.get('balance', 0):,.0f} —Ç—É–º–∞–Ω–æ–≤"
        first_name = helpers.escape_markdown_v1(user_info.get('first_name', ''))
        
        user_details_text = (
            f"üë§ **–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:** {first_name}\n\n"
            f"`ID: {user_info['telegram_id']}`\n"
            f"**–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:** {role}\n"
            f"**–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:** {balance}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:"
        )
        
        markup = inline_keyboards.get_manage_user_menu(target_user_id)
        
        _bot.edit_message_text(
            user_details_text,
            admin_id,
            message_id_to_edit,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —á–∏—Å–ª–æ–≤–æ–π ID
            reply_markup=markup,
            parse_mode='Markdown'
        )
        
    def start_broadcast_flow(admin_id, message):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        _clear_admin_state(admin_id)
        prompt_text = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å **—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ñ–∞–π–ª—ã –∏ —Ç.–¥.** "
            "–í—Å–µ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ, –±—É–¥–µ—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
        )
        prompt = _show_menu(admin_id, prompt_text, inline_keyboards.get_back_button("admin_main_menu"), message)
        _admin_states[admin_id] = {
            'state': 'waiting_for_broadcast_message',
            'data': {},  # <-- —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É
            'prompt_message_id': prompt.message_id
        }

    def check_and_fix_subscription_links(admin_id, message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏"""
        _clear_admin_state(admin_id)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–ü—Ä–æ–≤–µ—Ä–∫–∞..."
        _bot.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏...", admin_id, message.message_id)
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
            active_purchases = _db_manager.get_all_active_purchases()
            if not active_purchases:
                _bot.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", admin_id, message.message_id)
                return
            
            fixed_count = 0
            error_count = 0
            healthy_count = 0
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
            active_domain_record = _db_manager.get_active_subscription_domain()
            domain_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if active_domain_record else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            
            for purchase in active_purchases:
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è single_configs_json
                    if not purchase.get('single_configs_json'):
                        error_count += 1
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è sub_id
                    if not purchase.get('sub_id'):
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ sub_id
                        import uuid
                        new_sub_id = str(uuid.uuid4().hex)
                        _db_manager.update_purchase_sub_id(purchase['id'], new_sub_id)
                        fixed_count += 1
                    else:
                        healthy_count += 1
                    
                except Exception as e:
                    error_count += 1
                    logger.error(f"Error fixing subscription {purchase['id']}: {e}")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_text = f"üîß **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
            result_text += f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            result_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: **{len(active_purchases)}**\n"
            result_text += f"‚Ä¢ –†–∞–±–æ—á–∏—Ö: **{healthy_count}**\n"
            result_text += f"‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: **{fixed_count}**\n"
            result_text += f"‚Ä¢ –° –æ—à–∏–±–∫–∞–º–∏: **{error_count}**\n\n"
            result_text += f"üåê **–°—Ç–∞—Ç—É—Å –¥–æ–º–µ–Ω–∞:** {domain_status}\n\n"
            
            if fixed_count > 0:
                result_text += "üéâ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –±—ã–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã."
            elif error_count == 0:
                result_text += "‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ."
            else:
                result_text += "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_main_menu"))
            
            _bot.edit_message_text(result_text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
            
        except Exception as e:
            logger.error(f"Error in check_and_fix_subscription_links: {e}")
            _bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–æ–∫:\n{str(e)}",
                admin_id, message.message_id
            )

    @_bot.callback_query_handler(func=lambda call: call.data == "admin_check_subscription_links")
    def handle_check_subscription_links_callback(call):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ callback'–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            admin_id = call.from_user.id
            if admin_id not in ADMIN_IDS:
                _bot.answer_callback_query(call.id, "‚ùå –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø", show_alert=True)
                return
            
            check_and_fix_subscription_links(admin_id, call.message)
            
        except Exception as e:
            logger.error(f"Error in check subscription links callback: {e}")
            _bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–æ–∫", show_alert=True)

    @_bot.callback_query_handler(func=lambda call: call.data == "admin_refresh_all_subscriptions")
    def handle_refresh_all_subscriptions_callback(call):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ callback'–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            admin_id = call.from_user.id
            if admin_id not in ADMIN_IDS:
                _bot.answer_callback_query(call.id, "‚ùå –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø", show_alert=True)
                return
            
            refresh_all_subscription_links(admin_id, call.message)
            
        except Exception as e:
            logger.error(f"Error in refresh all subscriptions callback: {e}")
            _bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫", show_alert=True)

    def update_configs_from_panel(admin_id, purchase_id, message):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        """
        _clear_admin_state(admin_id)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
        _bot.edit_message_text("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏...", admin_id, message.message_id)
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫—É–ø–∫–µ
            purchase = _db_manager.get_purchase_by_id(purchase_id)
            if not purchase:
                _bot.edit_message_text("‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", admin_id, message.message_id)
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
            server = _db_manager.get_server_by_id(purchase['server_id'])
            if not server:
                _bot.edit_message_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", admin_id, message.message_id)
                return
            
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫ webhook server
            import requests
            webhook_url = f"https://{os.getenv('WEBHOOK_DOMAIN', 'localhost')}/admin/update_configs/{purchase_id}"
            headers = {
                'Authorization': f'Bearer {os.getenv("ADMIN_API_KEY", "your-secret-key")}'
            }
            
            response = requests.post(webhook_url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                _bot.edit_message_text(
                    f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ #{purchase_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.\n\n"
                    f"üìä **–î–µ—Ç–∞–ª–∏:**\n"
                    f"‚Ä¢ –°–µ—Ä–≤–µ—Ä: {server['name']}\n"
                    f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {purchase.get('user_first_name', 'N/A')}\n"
                    f"‚Ä¢ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                    admin_id, message.message_id, parse_mode='Markdown'
                )
            else:
                _bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.\n"
                    f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}\n"
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ: {response.text}",
                    admin_id, message.message_id
                )
                
        except Exception as e:
            logger.error(f"Error updating configs from panel: {e}")
            _bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:\n{str(e)}",
                admin_id, message.message_id
            )

    def refresh_all_subscription_links(admin_id, message):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        """
        _clear_admin_state(admin_id)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
        _bot.edit_message_text("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏...", admin_id, message.message_id)
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫
            active_purchases = _db_manager.get_all_active_purchases()
            
            if not active_purchases:
                _bot.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", admin_id, message.message_id)
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            webhook_domain = os.getenv('WEBHOOK_DOMAIN')
            admin_api_key = os.getenv('ADMIN_API_KEY')
            
            if not webhook_domain:
                _bot.edit_message_text(
                    "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_DOMAIN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ .env.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–Ω webhook.",
                    admin_id, message.message_id
                )
                return
            
            if not admin_api_key:
                _bot.edit_message_text(
                    "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ .env.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API-–∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    admin_id, message.message_id
                )
                return
            
            success_count = 0
            error_count = 0
            profile_count = 0
            normal_count = 0
            
            # –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ webhook server
            import requests
            webhook_base_url = f"https://{webhook_domain}/admin/update_configs"
            headers = {
                'Authorization': f'Bearer {admin_api_key}'
            }
            
            for purchase in active_purchases:
                try:
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–∫—É–ø–∫–∏
                    if purchase.get('profile_id'):
                        profile_count += 1
                        purchase_type = "–ü—Ä–æ—Ñ–∏–ª—å"
                    else:
                        normal_count += 1
                        purchase_type = "–û–±—ã—á–Ω–∞—è"
                    
                    webhook_url = f"{webhook_base_url}/{purchase['id']}"
                    response = requests.post(webhook_url, headers=headers, timeout=30)
                    
                    if response.status_code == 200:
                        success_count += 1
                        logger.info(f"Successfully updated purchase {purchase['id']} ({purchase_type})")
                    elif response.status_code == 401:
                        error_count += 1
                        logger.error(f"Unauthorized for purchase {purchase['id']}: Invalid API key")
                    elif response.status_code == 404:
                        error_count += 1
                        logger.error(f"Purchase {purchase['id']} not found in webhook server")
                    else:
                        error_count += 1
                        logger.error(f"HTTP {response.status_code} for purchase {purchase['id']}: {response.text}")
                        
                except requests.exceptions.ConnectionError:
                    error_count += 1
                    logger.error(f"Connection error for purchase {purchase['id']}: Webhook server not reachable")
                except requests.exceptions.Timeout:
                    error_count += 1
                    logger.error(f"Timeout for purchase {purchase['id']}")
                except Exception as e:
                    error_count += 1
                    logger.error(f"Error updating purchase {purchase['id']}: {e}")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –±–æ–ª—å—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
            result_text = f"üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
            result_text += f"üìä **–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n"
            result_text += f"‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω–æ: **{success_count}** —Å—Å—ã–ª–æ–∫\n"
            result_text += f"‚Ä¢ ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: **{error_count}** —Å—Å—ã–ª–æ–∫\n"
            result_text += f"‚Ä¢ üìà –í—Å–µ–≥–æ: **{len(active_purchases)}** —Å—Å—ã–ª–æ–∫\n\n"
            
            result_text += f"üìã **–î–µ—Ç–∞–ª–∏ –ø–æ–∫—É–ø–æ–∫:**\n"
            result_text += f"‚Ä¢ üéØ –ü–æ–∫—É–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: **{profile_count}**\n"
            result_text += f"‚Ä¢ üîß –û–±—ã—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏: **{normal_count}**\n\n"
            
            if success_count > 0:
                result_text += "üéâ **–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**\n"
                result_text += "‚úÖ –°—Å—ã–ª–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.\n"
                result_text += "‚úÖ –û–±—ã—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.\n\n"
                
                if profile_count > 0:
                    result_text += "üîó **–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è:**\n"
                    result_text += "‚Ä¢ –ü–æ–∫—É–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π —Ç–µ–ø–µ—Ä—å —Å–æ–±–∏—Ä–∞—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è\n"
                    result_text += "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ\n"
                    result_text += "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–º–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π\n"
            elif error_count > 0:
                result_text += "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n"
                result_text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            else:
                result_text += "‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_main_menu"))
            
            _bot.edit_message_text(result_text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
            
        except Exception as e:
            logger.error(f"Error refreshing all subscription links: {e}")
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:\n{str(e)}"
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_main_menu"))
            
            _bot.edit_message_text(error_text, admin_id, message.message_id, reply_markup=markup)

    def show_config_builder_test_menu(admin_id, message):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —Ç–µ—Å—Ç–∞ Config Builder"""
        _clear_admin_state(admin_id)
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
            servers = _db_manager.get_all_servers()
            
            if not servers:
                _bot.edit_message_text(
                    "‚ùå –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä.",
                    admin_id, message.message_id
                )
                return
            
            text = "üß™ **–¢–µ—Å—Ç Config Builder**\n\n"
            text += "–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é —Å –ø–∞–Ω–µ–ª–∏:\n"
            text += "‚Ä¢ –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏ inbound\n"
            text += "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)\n"
            text += "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞\n"
            text += "‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã API\n\n"
            text += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:**\n"
            
            markup = types.InlineKeyboardMarkup()
            
            for server in servers:
                server_name = helpers.escape_markdown_v1(server['name'])
                text += f"‚Ä¢ {server_name}\n"
                markup.add(
                    types.InlineKeyboardButton(
                        f"üß™ –¢–µ—Å—Ç {server['name']}", 
                        callback_data=f"admin_test_config_server_{server['id']}"
                    )
                )
            
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu"))
            
            _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
            
        except Exception as e:
            logger.error(f"Error showing config builder test menu: {e}")
            _bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é —Ç–µ—Å—Ç–∞: {str(e)}", admin_id, message.message_id)

    def show_inbound_selection_for_test(admin_id, server_id, message=None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ inbounds –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        _clear_admin_state(admin_id)
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
            server_info = _db_manager.get_server_by_id(server_id)
            if not server_info:
                _bot.edit_message_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", admin_id, message.message_id)
                return
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏
            from api_client.xui_api_client import XuiAPIClient
            api_client = XuiAPIClient(
                panel_url=server_info['panel_url'],
                username=server_info['username'],
                password=server_info['password']
            )
            
            if not api_client.check_login():
                _bot.edit_message_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞–Ω–µ–ª–∏**\n\n"
                    f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                    f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏.",
                    admin_id, message.message_id, parse_mode='Markdown'
                )
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ inbounds
            inbounds = api_client.list_inbounds()
            if not inbounds:
                _bot.edit_message_text(
                    f"‚ùå **Inbounds –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                    f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                    f"–í –ø–∞–Ω–µ–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö inbounds.",
                    admin_id, message.message_id, parse_mode='Markdown'
                )
                return
            
            text = f"üì° **–í—ã–±–æ—Ä Inbound**\n\n"
            text += f"**–°–µ—Ä–≤–µ—Ä:** {server_info['name']}\n"
            text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π inbound:"
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            
            for inbound in inbounds:
                inbound_name = inbound.get('remark', f'Inbound {inbound["id"]}')
                inbound_id = inbound['id']
                protocol = inbound.get('protocol', 'unknown')
                port = inbound.get('port', 'unknown')
                
                markup.add(types.InlineKeyboardButton(
                    f"üîó {inbound_name} ({protocol}:{port})",
                    callback_data=f"admin_test_config_inbound_{server_id}_{inbound_id}"
                ))
            
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_test_config_builder"))
            
            _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
                
        except Exception as e:
            logger.error(f"Error showing inbound selection: {e}")
            _bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ inbounds: {str(e)}", admin_id, message.message_id)

    def test_config_builder_for_inbound(admin_id, message, server_id, inbound_id):
        """–¢–µ—Å—Ç Config Builder –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ inbound - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ç–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        import time  # Import time at the beginning of the function
        from utils.config_builder import build_vless_config  # Import config builder functions
        try:
            logger.info(f"Testing config builder for server {server_id}, inbound {inbound_id}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
            server_info = _db_manager.get_server_by_id(server_id)
            if not server_info:
                _bot.edit_message_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", admin_id, message.message_id)
                return
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–í –ø—Ä–æ—Ü–µ—Å—Å–µ..."
            _bot.edit_message_text(
                f"üß™ **–¢–µ—Å—Ç Config Builder**\n\n"
                f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                f"Inbound: **{inbound_id}**\n"
                f"‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...",
                admin_id, message.message_id, parse_mode='Markdown'
            )
            
            # import config builder
            from utils.config_builder import test_config_builder, build_vmess_config, build_vless_config, build_trojan_config
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞–Ω–µ–ª–∏
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ inbounds
                from api_client.xui_api_client import XuiAPIClient
                api_client = XuiAPIClient(
                    panel_url=server_info['panel_url'],
                    username=server_info['username'],
                    password=server_info['password']
                )
                
                if not api_client.check_login():
                    _bot.edit_message_text(
                        f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞–Ω–µ–ª–∏**\n\n"
                        f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                        f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏.\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞.",
                        admin_id, message.message_id, parse_mode='Markdown'
                    )
                    return
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ inbound
                inbound_info = api_client.get_inbound(inbound_id)
                if not inbound_info:
                    _bot.edit_message_text(
                        f"‚ùå **Inbound –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
                        f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                        f"Inbound ID: **{inbound_id}**\n"
                        f"–≠—Ç–æ—Ç inbound –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–Ω–µ–ª–∏.",
                        admin_id, message.message_id, parse_mode='Markdown'
                    )
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª–∏–µ–Ω—Ç–∞
                try:
                    inbound_settings = json.loads(inbound_info.get('settings', '{}'))
                except (json.JSONDecodeError, TypeError):
                    inbound_settings = {}
                
                clients = inbound_settings.get('clients', [])
                logger.info(f"Found {len(clients)} clients in inbound {inbound_id}")
                if clients:
                    for i, client in enumerate(clients):
                        logger.info(f"Client {i+1}: {client.get('email', 'Unknown')} (ID: {client.get('id', 'Unknown')})")
                
                if not clients:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
                    logger.info(f"No clients found in inbound {inbound_id}, creating test client...")
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                    test_uuid = str(uuid.uuid4())
                    test_client_data = {
                        "id": test_uuid,
                        "email": f"test-{int(time.time())}@alamor.com",
                        "name": f"Test-{int(time.time())}",
                        "flow": "",
                        "totalGB": 0,
                        "expiryTime": 0,
                        "enable": True,
                        "tgId": "",
                        "subId": "",
                        "limitIp": 0,
                        "reset": 0,
                        "comment": ""
                    }
                    logger.info(f"Created test client data: {test_client_data}")
                    logger.info(f"Test UUID: {test_uuid}")
                    logger.info(f"Test UUID type: {type(test_uuid)}")
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ inbound
                    try:
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ inbound
                        current_settings = json.loads(inbound_info.get('settings', '{}'))
                        current_clients = current_settings.get('clients', [])
                        
                        logger.info(f"Current settings: {current_settings}")
                        logger.info(f"Current clients count: {len(current_clients)}")
                        
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                        current_clients.append(test_client_data)
                        current_settings['clients'] = current_clients
                        
                        logger.info(f"Updated settings: {current_settings}")
                        logger.info(f"Updated clients count: {len(current_clients)}")
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ inbound - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
                        update_data = {
                            'settings': json.dumps(current_settings),
                            'port': inbound_info.get('port'),
                            'protocol': inbound_info.get('protocol'),
                            'streamSettings': inbound_info.get('streamSettings'),
                            'sniffing': inbound_info.get('sniffing'),
                            'tag': inbound_info.get('tag'),
                            'up': inbound_info.get('up'),
                            'down': inbound_info.get('down'),
                            'total': inbound_info.get('total'),
                            'remark': inbound_info.get('remark'),
                            'enable': inbound_info.get('enable', True)
                        }
                        
                        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π None
                        update_data = {k: v for k, v in update_data.items() if v is not None}
                        
                        logger.info(f"Adding new test client to inbound {inbound_id}")
                        logger.info(f"Current clients count: {len(current_clients)}")
                        logger.info(f"Update data: {update_data}")
                        logger.info(f"Update data JSON: {json.dumps(update_data, indent=2)}")
                        success = api_client.update_inbound(inbound_id, update_data)
                        logger.info(f"Update result: {success}")
                        
                        if success:
                            logger.info(f"Test client created successfully: {test_client_data['email']}")
                            
                            # –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–µ–º, —á—Ç–æ–±—ã –ø–∞–Ω–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞
                            time.sleep(2)
                            
                            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–∞–Ω–µ–ª–∏
                            try:
                                # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ inbound —Å –ø–∞–Ω–µ–ª–∏
                                updated_inbound_info = api_client.get_inbound(inbound_id)
                                if updated_inbound_info:
                                    updated_settings = json.loads(updated_inbound_info.get('settings', '{}'))
                                    updated_clients = updated_settings.get('clients', [])
                                    
                                    # –ü–æ–∏—Å–∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                                    for client in updated_clients:
                                        if client.get('email') == test_client_data['email']:
                                            test_client = client
                                            client_id = client.get('id')
                                            logger.info(f"Retrieved client data from panel: {client}")
                                            break
                                    else:
                                        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                        test_client = test_client_data
                                        client_id = test_client['id']
                                        logger.warning("Could not retrieve client from panel, using local data")
                                else:
                                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å inbound, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                    test_client = test_client_data
                                    client_id = test_client['id']
                                    logger.warning("Could not retrieve inbound from panel, using local data")
                            except Exception as e:
                                logger.error(f"Error retrieving client data from panel: {e}")
                                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                test_client = test_client_data
                                client_id = test_client['id']
                        else:
                            logger.error("Failed to create test client")
                            _bot.edit_message_text(
                                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞**\n\n"
                                f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                                f"Inbound: **{inbound_id}**\n"
                                f"–ù–µ —É–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.",
                                admin_id, message.message_id, parse_mode='Markdown'
                            )
                            return
                            
                    except Exception as e:
                        logger.error(f"Error creating test client: {e}")
                        _bot.edit_message_text(
                            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞**\n\n"
                            f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                            f"–û—à–∏–±–∫–∞: **{str(e)}**",
                            admin_id, message.message_id, parse_mode='Markdown'
                        )
                        return
                else:
                    # –ö–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                    logger.info(f"Found existing clients, but creating new test client for testing...")
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                    test_uuid = str(uuid.uuid4())
                    test_client_data = {
                        "id": test_uuid,
                        "email": f"test-{int(time.time())}@alamor.com",
                        "name": f"Test-{int(time.time())}",
                        "flow": "",
                        "totalGB": 0,
                        "expiryTime": 0,
                        "enable": True,
                        "tgId": "",
                        "subId": "",
                        "limitIp": 0,
                        "reset": 0,
                        "comment": ""
                    }
                    logger.info(f"Created test client data: {test_client_data}")
                    logger.info(f"Test UUID: {test_uuid}")
                    logger.info(f"Test UUID type: {type(test_uuid)}")
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ inbound
                    try:
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ inbound
                        current_settings = json.loads(inbound_info.get('settings', '{}'))
                        current_clients = current_settings.get('clients', [])
                        
                        logger.info(f"Current settings: {current_settings}")
                        logger.info(f"Current clients count: {len(current_clients)}")
                        
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                        current_clients.append(test_client_data)
                        current_settings['clients'] = current_clients
                        
                        logger.info(f"Updated settings: {current_settings}")
                        logger.info(f"Updated clients count: {len(current_clients)}")
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ inbound - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
                        update_data = {
                            'settings': json.dumps(current_settings),
                            'port': inbound_info.get('port'),
                            'protocol': inbound_info.get('protocol'),
                            'streamSettings': inbound_info.get('streamSettings'),
                            'sniffing': inbound_info.get('sniffing'),
                            'tag': inbound_info.get('tag'),
                            'up': inbound_info.get('up'),
                            'down': inbound_info.get('down'),
                            'total': inbound_info.get('total'),
                            'remark': inbound_info.get('remark'),
                            'enable': inbound_info.get('enable', True)
                        }
                        
                        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π None
                        update_data = {k: v for k, v in update_data.items() if v is not None}
                        
                        logger.info(f"Adding new test client to inbound {inbound_id}")
                        logger.info(f"Current clients count: {len(current_clients)}")
                        logger.info(f"Update data: {update_data}")
                        logger.info(f"Update data JSON: {json.dumps(update_data, indent=2)}")
                        success = api_client.update_inbound(inbound_id, update_data)
                        logger.info(f"Update result: {success}")
                        
                        if success:
                            logger.info(f"New test client created successfully: {test_client_data['email']}")
                            
                            # –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–µ–º, —á—Ç–æ–±—ã –ø–∞–Ω–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞
                            time.sleep(2)
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏
                            try:
                                updated_inbound_info = api_client.get_inbound(inbound_id)
                                if updated_inbound_info:
                                    updated_settings = json.loads(updated_inbound_info.get('settings', '{}'))
                                    updated_clients = updated_settings.get('clients', [])
                                    logger.info(f"Updated clients count: {len(updated_clients)}")
                                    
                                    # –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                                    for client in updated_clients:
                                        if client.get('email') == test_client_data['email']:
                                            logger.info(f"Found new client in panel: {client}")
                                            test_client = client
                                            client_id = client.get('id')
                                            break
                                    else:
                                        logger.warning("New client not found in panel, using local data")
                                        test_client = test_client_data
                                        client_id = test_client['id']
                                else:
                                    logger.warning("Could not retrieve updated inbound, using local data")
                                    test_client = test_client_data
                                    client_id = test_client['id']
                            except Exception as e:
                                logger.error(f"Error checking updated inbound: {e}")
                                test_client = test_client_data
                                client_id = test_client['id']
                        else:
                            logger.error("Failed to create new test client")
                            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                            test_client = clients[0]
                            client_id = test_client.get('id')
                            logger.info(f"Using existing client: {test_client.get('email', 'Unknown')}")
                            
                    except Exception as e:
                        logger.error(f"Error creating new test client: {e}")
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                        test_client = clients[0]
                        client_id = test_client.get('id')
                        logger.info(f"Using existing client: {test_client.get('email', 'Unknown')}")
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
                logger.info(f"Selected client: {test_client.get('email', 'Unknown')} with ID: {client_id}")
                logger.info(f"Client ID type: {type(client_id)}")
                logger.info(f"Client data: {test_client}")
                logger.info(f"Client data keys: {list(test_client.keys())}")
                
                # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                try:
                    # –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å –ø–∞–Ω–µ–ª–∏
                    logger.info(f"Using direct client data for config building")
                    logger.info(f"Client data to use: {test_client}")
                    logger.info(f"Client ID from test_client: {test_client.get('id', 'N/A')}")
                    logger.info(f"Client ID type: {type(test_client.get('id', 'N/A'))}")
                    
                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ UUID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                    if not test_client.get('id') or len(str(test_client.get('id', ''))) < 20:
                        logger.error(f"Invalid UUID in test_client: {test_client.get('id', 'N/A')}")
                        _bot.edit_message_text(
                            f"‚ùå **–û—à–∏–±–∫–∞ –≤ UUID –∫–ª–∏–µ–Ω—Ç–∞**\n\n"
                            f"–ù–µ–≤–µ—Ä–Ω—ã–π UUID: **{test_client.get('id', 'N/A')}**\n"
                            f"UUID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.",
                            admin_id, message.message_id, parse_mode='Markdown'
                        )
                        return
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ inbound
                    inbound_info = api_client.get_inbound(inbound_id)
                    if inbound_info:
                        # –ü—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VLESS
                        config = build_vless_config(test_client, inbound_info, server_info, "Alamor")
                        if config:
                            result = {
                                'protocol': 'vless',
                                'config': config,
                                'client_email': test_client.get('email', ''),
                                'client_name': test_client.get('name', ''),
                                'inbound_id': inbound_id,
                                'server_name': server_info.get('name', 'Unknown')
                            }
                        else:
                            result = None
                    else:
                        result = None
                        
                except Exception as e:
                    logger.error(f"Error in direct config building: {e}")
                    result = None
                
                if result:
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    text = f"‚úÖ **–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!**\n\n"
                    text += f"**–°–µ—Ä–≤–µ—Ä:** {server_info['name']}\n"
                    text += f"**–ü—Ä–æ—Ç–æ–∫–æ–ª:** {result['protocol']}\n"
                    text += f"**–ö–ª–∏–µ–Ω—Ç:** {result['client_email']}\n"
                    text += f"**Inbound:** {result['inbound_id']}\n\n"
                    text += f"**–°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**\n"
                    text += f"üéâ **Config Builder —Ä–∞–±–æ—Ç–∞–µ—Ç!**"
                    
                    markup = types.InlineKeyboardMarkup()
                    markup.add(
                        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_test_config_builder"),
                        types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main_menu")
                    )
                    
                    _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–µ–∑ Markdown
                    config_text = result['config']
                    logger.info(f"Sending config (length: {len(config_text)}): {config_text}")
                    _bot.send_message(admin_id, config_text)
                    
                else:
                    _bot.edit_message_text(
                        f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏**\n\n"
                        f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                        f"–ö–ª–∏–µ–Ω—Ç: **{test_client.get('email', 'Unknown')}**\n"
                        f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                        admin_id, message.message_id, parse_mode='Markdown'
                    )
                
            except Exception as e:
                logger.error(f"Error testing config builder: {e}")
                _bot.edit_message_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏**\n\n"
                    f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                    f"–û—à–∏–±–∫–∞: **{str(e)}**",
                    admin_id, message.message_id, parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"Error in test_config_builder_for_inbound: {e}")
            _bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}", admin_id, message.message_id)

    def test_config_builder_for_server(admin_id, message, server_id):
        """–¢–µ—Å—Ç Config Builder –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É inbound"""
        try:
            logger.info(f"Starting config builder test for server {server_id}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
            server_info = _db_manager.get_server_by_id(server_id)
            if not server_info:
                _bot.edit_message_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", admin_id, message.message_id)
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É inbound
            show_inbound_selection_for_test(admin_id, server_id, message)
                
        except Exception as e:
            logger.error(f"Error in test_config_builder_for_server: {e}")
            _bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}", admin_id, message.message_id)

    def show_json_logger_menu(admin_id, message):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ JSON"""
        _clear_admin_state(admin_id)
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            servers = _db_manager.get_all_servers(only_active=True)
            
            if not servers:
                _bot.edit_message_text(
                    "‚ùå **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä—ã.",
                    admin_id, message.message_id, parse_mode='Markdown'
                )
                return
            
            text = "üìã **–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ JSON –ø–∞–Ω–µ–ª–∏**\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:\n\n"
            
            markup = types.InlineKeyboardMarkup()
            
            for server in servers:
                button_text = f"üñ•Ô∏è {server['name']}"
                callback_data = f"admin_log_json_server_{server['id']}"
                markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
            
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu"))
            
            _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
            
        except Exception as e:
            logger.error(f"Error in show_json_logger_menu: {e}")
            _bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é: {str(e)}", admin_id, message.message_id)
            
    def show_inbound_selection_for_json_log(admin_id, message, server_id):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ inbound –¥–ª—è –ª–æ–≥–∞ JSON"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
            server_info = _db_manager.get_server_by_id(server_id)
            if not server_info:
                _bot.edit_message_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", admin_id, message.message_id)
                return
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ inbounds
            from api_client.xui_api_client import XuiAPIClient
            api_client = XuiAPIClient(
                panel_url=server_info['panel_url'],
                username=server_info['username'],
                password=server_info['password']
            )
            
            if not api_client.check_login():
                _bot.edit_message_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞–Ω–µ–ª–∏**\n\n"
                    f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                    f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏.",
                    admin_id, message.message_id, parse_mode='Markdown'
                )
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ inbounds
            inbounds = api_client.list_inbounds()
            if not inbounds:
                _bot.edit_message_text(
                    f"‚ùå **Inbounds –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                    f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**",
                    admin_id, message.message_id, parse_mode='Markdown'
                )
                return
            
            text = f"üìã **–í—ã–±–æ—Ä Inbound –¥–ª—è –ª–æ–≥–∞ JSON**\n\n"
            text += f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
            text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Inbounds: **{len(inbounds)}**\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π inbound –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:\n\n"
            
            markup = types.InlineKeyboardMarkup()
            
            for inbound in inbounds:
                inbound_id = inbound.get('id', 'Unknown')
                remark = inbound.get('remark', f'Inbound {inbound_id}')
                button_text = f"üîó {remark} (ID: {inbound_id})"
                callback_data = f"admin_log_json_inbound_{server_id}_{inbound_id}"
                markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
            
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_log_full_json"))
            
            _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
            
        except Exception as e:
            logger.error(f"Error in show_inbound_selection_for_json_log: {e}")
            _bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ inbounds: {str(e)}", admin_id, message.message_id)

    def log_full_json_for_inbound(admin_id, message, server_id, inbound_id):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ JSON –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ inbound"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
            server_info = _db_manager.get_server_by_id(server_id)
            if not server_info:
                _bot.edit_message_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", admin_id, message.message_id)
                return
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–í –ø—Ä–æ—Ü–µ—Å—Å–µ..."
            _bot.edit_message_text(
                f"üìã **–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ JSON**\n\n"
                f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                f"Inbound ID: **{inbound_id}**\n"
                f"‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏...",
                admin_id, message.message_id, parse_mode='Markdown'
            )
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏
            from api_client.xui_api_client import XuiAPIClient
            api_client = XuiAPIClient(
                panel_url=server_info['panel_url'],
                username=server_info['username'],
                password=server_info['password']
            )
            
            if not api_client.check_login():
                _bot.edit_message_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞–Ω–µ–ª–∏**\n\n"
                    f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**",
                    admin_id, message.message_id, parse_mode='Markdown'
                )
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ JSON inbound
            inbound_json = api_client.get_raw_inbound_data(inbound_id)
            if not inbound_json:
                _bot.edit_message_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ JSON**\n\n"
                    f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                    f"Inbound ID: **{inbound_id}**",
                    admin_id, message.message_id, parse_mode='Markdown'
                )
                return
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ JSON
            logger.info(f"=== COMPLETE JSON FOR INBOUND {inbound_id} ===")
            logger.info(f"Server: {server_info['name']}")
            logger.info(f"Inbound ID: {inbound_id}")
            logger.info("=== FULL JSON DATA ===")
            logger.info(json.dumps(inbound_json, indent=2, ensure_ascii=False))
            logger.info("=== END JSON DATA ===")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            text = f"‚úÖ **–ü–æ–ª–Ω—ã–π JSON –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω**\n\n"
            text += f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
            text += f"Inbound ID: **{inbound_id}**\n\n"
            text += "üìã –ü–æ–ª–Ω—ã–π JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–∞—Ö.\n"
            text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_log_full_json"),
                types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main_menu")
            )
            
            _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
            
        except Exception as e:
            logger.error(f"Error in log_full_json_for_inbound: {e}")
            _bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON: {str(e)}", admin_id, message.message_id)

    def show_subscription_system_status(admin_id, message):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫"""
        _clear_admin_state(admin_id)
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫—É–ø–æ–∫
            active_purchases = _db_manager.get_all_active_purchases()
            profile_purchases = _db_manager.get_all_purchases_by_type('profile')
            normal_purchases = _db_manager.get_all_purchases_by_type('normal')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
            profiles = _db_manager.get_all_profiles(only_active=True)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            webhook_domain = os.getenv('WEBHOOK_DOMAIN')
            admin_api_key = os.getenv('ADMIN_API_KEY')
            
            text = f"üìä **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫**\n\n"
            
            text += f"üîó **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            text += f"‚Ä¢ Webhook Domain: `{webhook_domain or '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}`\n"
            text += f"‚Ä¢ Admin API Key: `{'–Ω–∞—Å—Ç—Ä–æ–µ–Ω' if admin_api_key else '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}`\n\n"
            
            text += f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫:**\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: **{len(active_purchases)}**\n"
            text += f"‚Ä¢ –ü–æ–∫—É–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: **{len(profile_purchases)}**\n"
            text += f"‚Ä¢ –û–±—ã—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏: **{len(normal_purchases)}**\n\n"
            
            text += f"üéØ **–ü—Ä–æ—Ñ–∏–ª–∏:**\n"
            text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏: **{len(profiles)}**\n"
            
            if profiles:
                for profile in profiles[:3]:  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 3 –ø—Ä–æ—Ñ–∏–ª–µ–π
                    profile_inbounds = _db_manager.get_inbounds_for_profile(profile['id'])
                    text += f"  - {profile['name']}: {len(profile_inbounds)} inbounds\n"
                if len(profiles) > 3:
                    text += f"  - –∏ –µ—â–µ {len(profiles) - 3} –ø—Ä–æ—Ñ–∏–ª–µ–π...\n"
            
            text += f"\nüöÄ **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            text += f"‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è\n"
            text += f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            text += f"‚úÖ –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π\n"
            text += f"‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫\n"
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ", callback_data="admin_refresh_all_subscriptions"),
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu")
            )
            
            _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
            
        except Exception as e:
            logger.error(f"Error showing subscription system status: {e}")
            _bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {str(e)}", admin_id, message.message_id)

    def start_set_api_key_flow(admin_id, message):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API Key"""
        _clear_admin_state(admin_id)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ API Key
        current_api_key = os.getenv('ADMIN_API_KEY', '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ')
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ API Key (—Å–∫—Ä—ã—Ç–æ–≥–æ)
        if current_api_key != '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ':
            masked_key = current_api_key[:8] + "..." + current_api_key[-4:] if len(current_api_key) > 12 else "***"
        else:
            masked_key = "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        
        text = f"üîë **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API Key –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        text += f"**–¢–µ–∫—É—â–∏–π API Key:** `{masked_key}`\n\n"
        text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:**\n"
        text += f"‚Ä¢ –≠—Ç–æ—Ç –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        text += f"‚Ä¢ –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 16 —Å–∏–º–≤–æ–ª–æ–≤\n"
        text += f"‚Ä¢ –î–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        text += f"**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API Key:**"
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        _admin_states[admin_id] = {
            'state': 'waiting_for_api_key',
            'data': {}
        }
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu"))
        
        _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)

    def process_api_key_input(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ API Key"""
        admin_id = message.from_user.id
        api_key = message.text.strip()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            _bot.delete_message(admin_id, message.message_id)
        except:
            pass
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è API Key
        if len(api_key) < 16:
            _bot.send_message(
                admin_id,
                "‚ùå API Key –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 16 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu")
                )
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        import re
        if not re.match(r'^[a-zA-Z0-9\-_\.]+$', api_key):
            _bot.send_message(
                admin_id,
                "‚ùå API Key –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã -_.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu")
                )
            )
            return
        
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ .env
            from utils.helpers import update_env_file
            
            success = update_env_file('ADMIN_API_KEY', api_key)
            
            if success:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ API Key (—Å–∫—Ä—ã—Ç–æ–≥–æ)
                masked_key = api_key[:8] + "..." + api_key[-4:] if len(api_key) > 12 else "***"
                
                text = f"‚úÖ **API Key —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                text += f"**–ù–æ–≤—ã–π API Key:** `{masked_key}`\n\n"
                text += f"**–í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:**\n"
                text += f"‚Ä¢ –≠—Ç–æ—Ç –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª–µ .env\n"
                text += f"‚Ä¢ –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n"
                text += f"‚Ä¢ –•—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ\n"
                text += f"‚Ä¢ –î–ª—è –±–æ–ª—å—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ –∫–ª—é—á"
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_main_menu"))
                
                _bot.send_message(admin_id, text, parse_mode='Markdown', reply_markup=markup)
            else:
                _bot.send_message(
                    admin_id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ API Key.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu")
                    )
                )
                
        except Exception as e:
            logger.error(f"Error updating API key: {e}")
            _bot.send_message(
                admin_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ API Key:\n{str(e)}",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu")
                )
            )
        
        _clear_admin_state(admin_id)

    def show_config_creator_menu(admin_id, message):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        _clear_admin_state(admin_id)
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            servers = _db_manager.get_all_servers(only_active=True)
            
            if not servers:
                text = "‚ùå **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!**\n\n"
                text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä—ã –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏."
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu"))
                
                _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
                return
            
            text = "üîß **–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–∞–Ω–µ–ª–∏**\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:\n\n"
            
            markup = types.InlineKeyboardMarkup()
            
            for server in servers:
                status = "üü¢" if server.get('is_online') else "üî¥"
                button_text = f"{status} {server['name']}"
                callback_data = f"admin_create_config_server_{server['id']}"
                markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
            
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu"))
            
            _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
            
        except Exception as e:
            logger.error(f"Error showing config creator menu: {e}")
            _bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é: {str(e)}", admin_id, message.message_id)

    def show_inbound_selection_for_config(admin_id, message, server_id):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ inbound –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            server_info = _db_manager.get_server_by_id(server_id)
            if not server_info:
                _bot.edit_message_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", admin_id, message.message_id)
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ API client
            api_client = None
            if server_info['panel_type'] == 'alireza':
                from api_client.alireza_api_client import AlirezaAPIClient
                api_client = AlirezaAPIClient(
                    panel_url=server_info['panel_url'],
                    username=server_info['username'],
                    password=server_info['password']
                )
            else:
                from api_client.xui_api_client import XuiAPIClient
                api_client = XuiAPIClient(
                    panel_url=server_info['panel_url'],
                    username=server_info['username'],
                    password=server_info['password']
                )
            
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
            if not api_client.check_login():
                text = f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞–Ω–µ–ª–∏**\n\n"
                text += f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                text += f"–¢–∏–ø –ø–∞–Ω–µ–ª–∏: **{server_info['panel_type']}**\n"
                text += "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏."
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu"))
                
                _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ inbounds
            inbounds = api_client.list_inbounds()
            if not inbounds:
                text = f"‚ùå **Inbounds –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                text += f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                text += "–ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö inbounds."
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu"))
                
                _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
                return
            
            text = f"üì° **–í—ã–±–æ—Ä inbound**\n\n"
            text += f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
            text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ inbounds: **{len(inbounds)}**\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π inbound:\n\n"
            
            markup = types.InlineKeyboardMarkup()
            
            for inbound in inbounds:
                protocol = inbound.get('protocol', 'unknown')
                port = inbound.get('port', 'N/A')
                remark = inbound.get('remark', f'Inbound {inbound.get("id", "N/A")}')
                
                button_text = f"üîó {protocol.upper()} - {port} - {remark[:20]}"
                callback_data = f"admin_create_config_inbound_{server_id}_{inbound['id']}"
                markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
            
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu"))
            
            _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
            
        except Exception as e:
            logger.error(f"Error showing inbound selection: {e}")
            _bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ inbounds: {str(e)}", admin_id, message.message_id)

    def create_configs_for_inbound(admin_id, message, server_id, inbound_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ inbound"""
        from utils.config_builder import build_vmess_config, build_vless_config, build_trojan_config
        try:
            server_info = _db_manager.get_server_by_id(server_id)
            if not server_info:
                _bot.edit_message_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", admin_id, message.message_id)
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ API client
            api_client = None
            if server_info['panel_type'] == 'alireza':
                from api_client.alireza_api_client import AlirezaAPIClient
                api_client = AlirezaAPIClient(
                    panel_url=server_info['panel_url'],
                    username=server_info['username'],
                    password=server_info['password']
                )
            else:
                from api_client.xui_api_client import XuiAPIClient
                api_client = XuiAPIClient(
                    panel_url=server_info['panel_url'],
                    username=server_info['username'],
                    password=server_info['password']
                )
            
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
            if not api_client.check_login():
                _bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞–Ω–µ–ª–∏", admin_id, message.message_id)
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ inbound
            inbound_info = api_client.get_inbound(inbound_id)
            if not inbound_info:
                _bot.edit_message_text("‚ùå Inbound –Ω–µ –Ω–∞–π–¥–µ–Ω!", admin_id, message.message_id)
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ inbound
            clients = []
            try:
                settings_str = inbound_info.get('settings', '{}')
                settings = json.loads(settings_str) if isinstance(settings_str, str) else settings_str
                clients = settings.get('clients', [])
            except:
                clients = []
            
            if not clients:
                text = f"‚ùå **–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                text += f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                text += f"Inbound: **{inbound_info.get('remark', f'ID: {inbound_id}')}**\n"
                text += "–í —ç—Ç–æ–º inbound –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"admin_create_config_server_{server_id}"))
                
                _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            configs = []
            protocol = inbound_info.get('protocol', 'vmess')
            
            for client in clients:
                try:
                    if protocol == 'vmess':
                        config = build_vmess_config(client, inbound_info, server_info)
                    elif protocol == 'vless':
                        config = build_vless_config(client, inbound_info, server_info)
                    elif protocol == 'trojan':
                        config = build_trojan_config(client, inbound_info, server_info)
                    else:
                        continue
                    
                    if config:
                        configs.append({
                            'protocol': protocol,
                            'config': config,
                            'client_email': client.get('email', 'Unknown'),
                            'client_name': client.get('name', 'Unknown')
                        })
                except Exception as e:
                    logger.error(f"Error building config for client {client.get('email', 'Unknown')}: {e}")
                    continue
            
            if not configs:
                text = f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π**\n\n"
                text += f"–°–µ—Ä–≤–µ—Ä: **{server_info['name']}**\n"
                text += f"Inbound: **{inbound_info.get('remark', f'ID: {inbound_id}')}**\n"
                text += "–ù–∏ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ."
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"admin_create_config_server_{server_id}"))
                
                _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
                return
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            text = f"‚úÖ **–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏**\n\n"
            text += f"**–°–µ—Ä–≤–µ—Ä:** {server_info['name']}\n"
            text += f"**Inbound:** {inbound_info.get('remark', f'ID: {inbound_id}')}\n"
            text += f"**–ü—Ä–æ—Ç–æ–∫–æ–ª:** {protocol.upper()}\n"
            text += f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:** {len(configs)}\n\n"
            text += "**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**\n\n"
            
            for i, config_info in enumerate(configs, 1):
                text += f"**{i}. {config_info['client_email']}**\n"
                config_text = config_info['config']
                logger.info(f"Adding config {i} to single message (length: {len(config_text)}): {config_text}")
                text += f"{config_text}\n\n"
            
            # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            logger.info(f"Total message length: {len(text)} characters")
            if len(text) > 4000:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
                summary_text = f"‚úÖ **–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏**\n\n"
                summary_text += f"**–°–µ—Ä–≤–µ—Ä:** {server_info['name']}\n"
                summary_text += f"**Inbound:** {inbound_info.get('remark', f'ID: {inbound_id}')}\n"
                summary_text += f"**–ü—Ä–æ—Ç–æ–∫–æ–ª:** {protocol.upper()}\n"
                summary_text += f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:** {len(configs)}\n\n"
                summary_text += "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö..."
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"admin_create_config_server_{server_id}"))
                
                _bot.edit_message_text(summary_text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                for i, config_info in enumerate(configs, 1):
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å Markdown
                    title_text = f"**{i}. {config_info['client_email']}**"
                    _bot.send_message(admin_id, title_text, parse_mode='Markdown')
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑ Markdown, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Å–µ—á–µ–Ω–∏—è
                    config_text = config_info['config']
                    logger.info(f"Sending config {i} (length: {len(config_text)}): {config_text}")
                    _bot.send_message(admin_id, config_text)
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"admin_create_config_server_{server_id}"))
                
                _bot.edit_message_text(text, admin_id, message.message_id, parse_mode='Markdown', reply_markup=markup)
            
        except Exception as e:
            logger.error(f"Error creating configs for inbound: {e}")
            _bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {str(e)}", admin_id, message.message_id)
