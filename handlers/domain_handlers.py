# handlers/domain_handlers.py (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è, –ø–æ–ª–Ω–∞—è –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import telebot
from telebot import types
import logging

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from utils import messages, helpers
from keyboards import inline_keyboards
from utils.system_helpers import setup_domain_nginx_and_ssl, remove_domain_nginx_files, check_ssl_certificate_exists
from utils.helpers import update_env_file
from utils.system_helpers import run_shell_command

logger = logging.getLogger(__name__)

# –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
_bot = None
_db_manager = None
_admin_states = None

# =============================================================================
# –û—Å–Ω–æ–≤–Ω—ã–µ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ —Ñ–∞–π–ª–∞)
# =============================================================================

def _clear_admin_state(admin_id):
    if admin_id in _admin_states:
        del _admin_states[admin_id]

def _show_menu(user_id, text, markup, message=None, parse_mode='Markdown'):
    try:
        if message:
            return _bot.edit_message_text(text, user_id, message.message_id, reply_markup=markup, parse_mode=parse_mode)
        else:
            return _bot.send_message(user_id, text, reply_markup=markup, parse_mode=parse_mode)
    except telebot.apihelper.ApiTelegramException as e:
        if "can't parse entities" in str(e):
            if message: _bot.edit_message_text(text, user_id, message.message_id, reply_markup=markup, parse_mode=None)
            else: _bot.send_message(user_id, text, reply_markup=markup, parse_mode=None)
        elif 'message is not modified' not in str(e):
             logger.warning(f"Menu error for {user_id}: {e}")
    return message
    
def show_domain_management_menu(admin_id, message=None):
    domains = _db_manager.get_all_subscription_domains()
    domains_with_status = []
    for row in domains:
        domain_dict = dict(row)
        domain_dict['ssl_status'] = check_ssl_certificate_exists(domain_dict['domain_name'])
        domains_with_status.append(domain_dict)
    markup = inline_keyboards.get_domain_management_menu(domains_with_status)
    _show_menu(admin_id, "üåê –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–º–µ–Ω–∞–º–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏.", markup, message)
def start_add_domain_flow(admin_id, message):
    _clear_admin_state(admin_id)
    prompt = _show_menu(admin_id, messages.ADD_DOMAIN_PROMPT, inline_keyboards.get_back_button("admin_domain_management"), message)
    _admin_states[admin_id] = {'state': 'waiting_for_domain_name', 'data': {}, 'prompt_message_id': prompt.message_id}

def execute_delete_domain(admin_id, message, domain_id):
    """Executes the main logic for deleting a domain from the system and database."""
    domain = next((d for d in _db_manager.get_all_subscription_domains() if d['id'] == domain_id), None)
    if not domain:
        _bot.answer_callback_query(message.id, "Domain not found.", show_alert=True)
        return

    # --- THE FIX IS HERE ---
    # Immediately respond to the click before performing slow operations
    _bot.answer_callback_query(message.id, f"‚è≥ Deleting domain {domain['domain_name']}...")

    domain_name = domain['domain_name']
    
    # Now, perform the time-consuming tasks
    remove_domain_nginx_files(domain_name)
    _db_manager.delete_subscription_domain(domain_id)
    
    # Finally, show the updated menu
    show_domain_management_menu(admin_id, message)
def start_webhook_setup_flow(admin_id, message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–µ–Ω–∞ –¥–ª—è –≤–µ–±-—Ö—É–∫–∞."""
    _clear_admin_state(admin_id)
    prompt = _show_menu(admin_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –¥–ª—è –≤–µ–±-—Ö—É–∫–∞ –∏ –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç–µ–∂–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: pay.yourdomain.com):", inline_keyboards.get_back_button("admin_main_menu"), message)
    _admin_states[admin_id] = {'state': 'waiting_for_webhook_domain', 'prompt_message_id': prompt.message_id}

def _create_and_start_webhook_service():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç systemd —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–µ–±-—Ö—É–∫–∞."""
    service_content = """
[Unit]
Description=AlamorBot Webhook Server
After=network.target
[Service]
User=root
WorkingDirectory=/var/www/alamorvpn_bot
ExecStart=/var/www/alamorvpn_bot/.venv/bin/python3 /var/www/alamorvpn_bot/webhook_server.py
Restart=always
RestartSec=10s
[Install]
WantedBy=multi-user.target
"""
    try:
        with open("/tmp/alamor_webhook.service", "w") as f: f.write(service_content)
        run_shell_command(['mv', '/tmp/alamor_webhook.service', '/etc/systemd/system/alamor_webhook.service'])
        run_shell_command(['systemctl', 'daemon-reload'])
        run_shell_command(['systemctl', 'enable', 'alamor_webhook.service'])
        success, output = run_shell_command(['systemctl', 'restart', 'alamor_webhook.service'])
        return success, output
    except Exception as e:
        return False, str(e)

# =============================================================================
# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# =============================================================================
def register_domain_handlers(bot, db_manager, admin_states):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –¥–æ–º–µ–Ω–∞–º–∏ –∏ –≤–µ–±-—Ö—É–∫–æ–º."""
    global _bot, _db_manager, _admin_states
    _bot = bot
    _db_manager = db_manager
    _admin_states = admin_states

    # --- Stateful Message Handler ---
    @_bot.message_handler(
        content_types=['text'],
        func=lambda msg: helpers.is_admin(msg.from_user.id) and _admin_states.get(msg.from_user.id, {}).get('state') in [
            'waiting_for_domain_name', 'waiting_for_letsencrypt_email',
            'waiting_for_webhook_domain', 'waiting_for_webhook_email'
        ]
    )
    def handle_domain_stateful_messages(message):
        admin_id = message.from_user.id
        state_info = _admin_states.get(admin_id)
        if not state_info: return

        state = state_info.get("state")
        prompt_id = state_info.get("prompt_message_id")
        data = state_info.get("data", {})
        text = message.text.strip()
        
        if state == 'waiting_for_domain_name':
            domain_name = text.lower()
            state_info['state'] = 'waiting_for_letsencrypt_email'
            state_info['data']['domain_name'] = domain_name
            _bot.edit_message_text("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:", admin_id, prompt_id)
        
        elif state == 'waiting_for_letsencrypt_email':
            admin_email = text
            _db_manager.update_setting('letsencrypt_email', admin_email)
            domain_name = data['domain_name']
            _bot.edit_message_text(f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n–ò–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–∞ {domain_name} –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...", admin_id, prompt_id)
            success, message_text = setup_domain_nginx_and_ssl(domain_name, admin_email)
            if success:
                if _db_manager.add_subscription_domain(domain_name):
                     _bot.send_message(admin_id, f"‚úÖ –î–æ–º–µ–Ω {domain_name} –¥–æ–±–∞–≤–ª–µ–Ω, –∏ –¥–ª—è –Ω–µ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω SSL.")
                else:
                     _bot.send_message(admin_id, "‚ùå –î–æ–º–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Nginx, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            else:
                _bot.send_message(admin_id, f"‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.\n–ü—Ä–∏—á–∏–Ω–∞: {message_text}")
            _clear_admin_state(admin_id)
            show_domain_management_menu(admin_id)
            
        elif state == 'waiting_for_webhook_domain':
            domain_name = text.lower()
            state_info['data'] = {'domain_name': domain_name}
            state_info['state'] = 'waiting_for_webhook_email'
            _bot.edit_message_text("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É:", admin_id, prompt_id)

        elif state == 'waiting_for_webhook_email':
            admin_email = text.lower()
            domain_name = data['domain_name']
            _bot.edit_message_text(f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n–ò–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–∞ –¥–ª—è –≤–µ–±-—Ö—É–∫–∞ {domain_name}...", admin_id, prompt_id)
            ssl_success, ssl_message = setup_domain_nginx_and_ssl(domain_name, admin_email)
            if not ssl_success:
                _bot.send_message(admin_id, f"‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.\n–ü—Ä–∏—á–∏–Ω–∞: {ssl_message}")
            elif not update_env_file('WEBHOOK_DOMAIN', domain_name):
                _bot.send_message(admin_id, "‚ùå –î–æ–º–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ .env.")
            else:
                service_success, service_output = _create_and_start_webhook_service()
                if not service_success:
                    _bot.send_message(admin_id, f"‚ùå –î–æ–º–µ–Ω –∏ .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞ –≤–µ–±-—Ö—É–∫–∞:\n`{service_output}`")
                else:
                    _bot.send_message(admin_id, "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–º–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏ —Å–µ—Ä–≤–∏—Å –≤–µ–±-—Ö—É–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            _clear_admin_state(admin_id)
            from handlers.admin_handlers import _show_admin_main_menu
            _show_admin_main_menu(admin_id)

    # --- Callback Handler ---
    @_bot.callback_query_handler(
        func=lambda call: helpers.is_admin(call.from_user.id) and call.data.startswith('admin_') and 'domain' in call.data
    )
    def handle_domain_callbacks(call):
        admin_id, message, data = call.from_user.id, call.message, call.data

        if data == "admin_domain_management":
            _clear_admin_state(admin_id)
            show_domain_management_menu(admin_id, message)
        elif data == "admin_add_domain":
            _bot.answer_callback_query(call.id)
            start_add_domain_flow(admin_id, message)
        elif data.startswith("admin_activate_domain_"):
            _bot.answer_callback_query(call.id)
            domain_id = int(data.split('_')[-1])
            _db_manager.set_active_subscription_domain(domain_id)
            show_domain_management_menu(admin_id, message)
        elif data.startswith("admin_delete_domain_"):
            domain_id = int(data.split('_')[-1])
            domain = next((d for d in _db_manager.get_all_subscription_domains() if d['id'] == domain_id), None)
            if domain:
                confirm_markup = inline_keyboards.get_confirmation_menu(f"confirm_delete_domain_{domain_id}", "admin_domain_management")
                _show_menu(admin_id, f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω {domain['domain_name']}?", confirm_markup, message)
        elif data.startswith("confirm_delete_domain_"):
            _bot.answer_callback_query(call.id, "‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞...")
            domain_id = int(data.split('_')[-1])
            execute_delete_domain(admin_id, message, domain_id)         
            