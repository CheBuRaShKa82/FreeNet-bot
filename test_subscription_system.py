"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–∫–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import requests
import base64
import json

def test_subscription_endpoint():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –ø–æ–¥–ø–∏—Å–∫–∏"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –ø–æ–¥–ø–∏—Å–∫–∏ ===")
    
    # –¢–µ—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º sub_id
    test_sub_id = "test123"
    webhook_url = "http://localhost:8080/sub/" + test_sub_id
    
    try:
        response = requests.get(webhook_url, timeout=10)
        print(f"Status Code: {response.status_code}")
        print(f"Content Type: {response.headers.get('content-type')}")
        print(f"Response Length: {len(response.text)}")
        
        if response.status_code == 200:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Base64
            try:
                decoded = base64.b64decode(response.text)
                print(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64. –î–ª–∏–Ω–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ: {len(decoded)}")
                print(f"–ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {decoded[:100]}...")
            except:
                print("‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64")
                print(f"–ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {response.text[:100]}...")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")

def test_content_detection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ===")
    
    test_cases = [
        ("vmess://test123", "v2ray_config"),
        ("vless://test123", "v2ray_config"),
        ("trojan://test123", "v2ray_config"),
        (base64.b64encode(b"test content").decode(), "base64"),
        ('{"key": "value"}', "json"),
        ("plain text content", "plain_text")
    ]
    
    for content, expected_type in test_cases:
        detected_type = detect_content_type(content)
        status = "‚úÖ" if detected_type == expected_type else "‚ùå"
        print(f"{status} {content[:20]}... -> {detected_type} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_type})")

def detect_content_type(content):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Base64
    try:
        decoded = base64.b64decode(content)
        return 'base64'
    except:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON
    try:
        json.loads(content)
        return 'json'
    except:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π V2Ray
    if 'vmess://' in content or 'vless://' in content or 'trojan://' in content:
        return 'v2ray_config'
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    return 'plain_text'

def test_panel_data_fetch():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ ===")
    
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    print("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    print("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–Ω–µ–ª–∏ –≤ —Ñ–∞–π–ª–µ config.py")

if __name__ == "__main__":
    print("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–∫–∏\n")
    
    test_subscription_endpoint()
    test_content_detection()
    test_panel_data_fetch()
    
    print("\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìù –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:")
    print("1. –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏")
    print("2. –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("3. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
    print("4. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—Ä—É—á–Ω—É—é –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")