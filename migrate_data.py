# migrate_data.py
import sqlite3
import psycopg2
import psycopg2.extras
import json
import logging
import os
from dotenv import load_dotenv

# --- –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö ---
# SQLite (–∏—Å—Ç–æ—á–Ω–∏–∫)
SQLITE_DB_PATH = os.getenv("DATABASE_NAME", "database/freenet_vpn.db")

# PostgreSQL (—Ü–µ–ª—å) - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
PG_CONFIG = {
    "dbname": os.getenv("DB_NAME"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "host": os.getenv("DB_HOST", "localhost"),
    "port": os.getenv("DB_PORT", "5432")
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö PostgreSQL
if not all([PG_CONFIG["dbname"], PG_CONFIG["user"], PG_CONFIG["password"]]):
    logging.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ PostgreSQL –≤ —Ñ–∞–π–ª–µ .env –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
    logging.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ DB_NAME, DB_USER –∏ DB_PASSWORD –≤ —Ñ–∞–π–ª–µ .env.")
    exit(1)

# –ü–æ—Ä—è–¥–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Foreign Keys)
TABLES_IN_ORDER = [
    'users',
    'settings',
    'servers',
    'plans',
    'server_inbounds',
    'payment_gateways',
    'free_test_usage',
    'payments',
    'purchases',
    'tutorials'
]

def migrate_data():
    """
    –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –≤ PostgreSQL.
    """
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ-–∏—Å—Ç–æ—á–Ω–∏–∫—É (SQLite)
        sqlite_conn = sqlite3.connect(SQLITE_DB_PATH)
        sqlite_conn.row_factory = sqlite3.Row
        sqlite_cur = sqlite_conn.cursor()
        logging.info(f"‚úÖ Connected to source SQLite database: {SQLITE_DB_PATH}")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ-—Ü–µ–ª–∏ (PostgreSQL)
        pg_conn = psycopg2.connect(**PG_CONFIG)
        pg_cur = pg_conn.cursor()
        logging.info(f"‚úÖ Connected to destination PostgreSQL database: {PG_CONFIG['dbname']}")

    except Exception as e:
        logging.error(f"‚ùå Database connection failed: {e}")
        return

    # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∑–∞ —Ç–∞–±–ª–∏—Ü–µ–π
    for table_name in TABLES_IN_ORDER:
        try:
            logging.info(f"--- Starting migration for table: {table_name} ---")
            
            # 1. –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            sqlite_cur.execute(f"SELECT * FROM {table_name}")
            rows = sqlite_cur.fetchall()
            
            if not rows:
                logging.info(f"Table '{table_name}' is empty. Skipping.")
                continue

            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º—ë–Ω —Å—Ç–æ–ª–±—Ü–æ–≤
            columns = [description[0] for description in sqlite_cur.description]
            
            # 3. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ INSERT –¥–ª—è PostgreSQL
            placeholders = ', '.join(['%s'] * len(columns))
            pg_query = f"INSERT INTO {table_name} ({', '.join(columns)}) VALUES ({placeholders})"

            # 4. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –¥–ª—è psycopg2
            data_to_insert = [tuple(row) for row in rows]
            
            # 5. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å—Ä–∞–∑—É
            pg_cur.executemany(pg_query, data_to_insert)
            
            logging.info(f"‚úÖ Migrated {len(rows)} rows to table '{table_name}'.")

        except Exception as e:
            logging.error(f"‚ùå FAILED to migrate table '{table_name}'. Error: {e}")
            logging.error("Rolling back all changes. Aborting migration.")
            pg_conn.rollback() # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ, –æ—Ç–∫–∞—Ç –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            return # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞
            
    # –ï—Å–ª–∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    logging.info("\nüéâ All tables migrated successfully! Committing changes.")
    pg_conn.commit()

    # –°–±—Ä–æ—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã—Ö ID
    try:
        logging.info("--- Resetting primary key sequences in PostgreSQL ---")
        for table in TABLES_IN_ORDER:
            # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∞–±–ª–∏—Ü —Å —Å—Ç–æ–ª–±—Ü–æ–º id
            pg_cur.execute(f"SELECT column_name FROM information_schema.columns WHERE table_name = '{table}' AND column_name = 'id'")
            if pg_cur.fetchone():
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ id
                pg_cur.execute(f"SELECT setval(pg_get_serial_sequence('{table}', 'id'), COALESCE(MAX(id), 1)) FROM {table};")
        pg_conn.commit()
        logging.info("‚úÖ Sequences reset successfully.")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Could not reset sequences. This is usually not critical. Error: {e}")
        pg_conn.rollback()

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    sqlite_conn.close()
    pg_conn.close()
    logging.info("--- Migration process finished. ---")

if __name__ == "__main__":
    migrate_data()